{"ast":null,"code":"import _construct from \"/Users/baic/Documents/programm/gsrlic/node_modules/@babel/runtime/helpers/esm/construct\";\nimport _toConsumableArray from \"/Users/baic/Documents/programm/gsrlic/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectWithoutProperties from \"/Users/baic/Documents/programm/gsrlic/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"args\", \"map\", \"toneMapped\", \"color\", \"form\", \"intensity\", \"scale\", \"target\", \"children\"];\nimport _extends from '@babel/runtime/helpers/esm/extends';\nimport { applyProps } from '@react-three/fiber';\nimport * as React from 'react';\nimport * as THREE from 'three';\nimport mergeRefs from 'react-merge-refs';\nvar Lightformer = /*#__PURE__*/React.forwardRef(function (_ref, forwardRef) {\n  var args = _ref.args,\n    map = _ref.map,\n    _ref$toneMapped = _ref.toneMapped,\n    toneMapped = _ref$toneMapped === void 0 ? false : _ref$toneMapped,\n    _ref$color = _ref.color,\n    color = _ref$color === void 0 ? 'white' : _ref$color,\n    _ref$form = _ref.form,\n    Form = _ref$form === void 0 ? 'rect' : _ref$form,\n    _ref$intensity = _ref.intensity,\n    intensity = _ref$intensity === void 0 ? 1 : _ref$intensity,\n    _ref$scale = _ref.scale,\n    scale = _ref$scale === void 0 ? 1 : _ref$scale,\n    target = _ref.target,\n    children = _ref.children,\n    props = _objectWithoutProperties(_ref, _excluded);\n  // Apply emissive power\n  var ref = React.useRef(null);\n  React.useLayoutEffect(function () {\n    if (!children && !props.material) {\n      applyProps(ref.current.material, {\n        color: color\n      });\n      ref.current.material.color.multiplyScalar(intensity);\n    }\n  }, [color, intensity, children, props.material]); // Target light\n\n  React.useLayoutEffect(function () {\n    if (target) ref.current.lookAt(Array.isArray(target) ? _construct(THREE.Vector3, _toConsumableArray(target)) : target);\n  }, [target]); // Fix 2-dimensional scale\n\n  scale = Array.isArray(scale) && scale.length === 2 ? [scale[0], scale[1], 1] : scale;\n  return /*#__PURE__*/React.createElement(\"mesh\", _extends({\n    ref: mergeRefs([ref, forwardRef]),\n    scale: scale\n  }, props), Form === 'circle' ? /*#__PURE__*/React.createElement(\"ringGeometry\", {\n    args: [0, 1, 64]\n  }) : Form === 'ring' ? /*#__PURE__*/React.createElement(\"ringGeometry\", {\n    args: [0.5, 1, 64]\n  }) : Form === 'rect' ? /*#__PURE__*/React.createElement(\"planeGeometry\", null) : /*#__PURE__*/React.createElement(Form, {\n    args: args\n  }), children ? children : !props.material ? /*#__PURE__*/React.createElement(\"meshBasicMaterial\", {\n    toneMapped: toneMapped,\n    map: map,\n    side: THREE.DoubleSide\n  }) : null);\n});\nexport { Lightformer };","map":null,"metadata":{},"sourceType":"module"}