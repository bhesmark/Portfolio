{"ast":null,"code":"import _slicedToArray from \"/Users/baic/Documents/programm/gsrlic/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nimport * as THREE from 'three';\nimport { useThree } from '@react-three/fiber';\nimport { Line } from '../../core/Line.js';\nimport { Html } from '../Html.js';\nimport { context } from './context.js';\nvar decomposeIntoBasis = function decomposeIntoBasis(e1, e2, offset) {\n  var i1 = Math.abs(e1.x) >= Math.abs(e1.y) && Math.abs(e1.x) >= Math.abs(e1.z) ? 0 : Math.abs(e1.y) >= Math.abs(e1.x) && Math.abs(e1.y) >= Math.abs(e1.z) ? 1 : 2;\n  var e2DegrowthOrder = [0, 1, 2].sort(function (a, b) {\n    return Math.abs(e2.getComponent(b)) - Math.abs(e2.getComponent(a));\n  });\n  var i2 = i1 === e2DegrowthOrder[0] ? e2DegrowthOrder[1] : e2DegrowthOrder[0];\n  var a1 = e1.getComponent(i1);\n  var a2 = e1.getComponent(i2);\n  var b1 = e2.getComponent(i1);\n  var b2 = e2.getComponent(i2);\n  var c1 = offset.getComponent(i1);\n  var c2 = offset.getComponent(i2);\n  var y = (c2 - c1 * (a2 / a1)) / (b2 - b1 * (a2 / a1));\n  var x = (c1 - y * b1) / a1;\n  return [x, y];\n};\nvar ray = new THREE.Ray();\nvar intersection = new THREE.Vector3();\nvar offsetMatrix = new THREE.Matrix4();\nvar PlaneSlider = function PlaneSlider(_ref) {\n  var dir1 = _ref.dir1,\n    dir2 = _ref.dir2,\n    axis = _ref.axis;\n  var _React$useContext = React.useContext(context),\n    translation = _React$useContext.translation,\n    translationLimits = _React$useContext.translationLimits,\n    annotationsClass = _React$useContext.annotationsClass,\n    depthTest = _React$useContext.depthTest,\n    scale = _React$useContext.scale,\n    lineWidth = _React$useContext.lineWidth,\n    fixed = _React$useContext.fixed,\n    axisColors = _React$useContext.axisColors,\n    hoveredColor = _React$useContext.hoveredColor,\n    displayValues = _React$useContext.displayValues,\n    opacity = _React$useContext.opacity,\n    onDragStart = _React$useContext.onDragStart,\n    onDrag = _React$useContext.onDrag,\n    onDragEnd = _React$useContext.onDragEnd,\n    userData = _React$useContext.userData; // @ts-expect-error new in @react-three/fiber@7.0.5\n\n  var camControls = useThree(function (state) {\n    return state.controls;\n  });\n  var divRef = React.useRef(null);\n  var objRef = React.useRef(null);\n  var clickInfo = React.useRef(null);\n  var offsetX0 = React.useRef(0);\n  var offsetY0 = React.useRef(0);\n  var _React$useState = React.useState(false),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    isHovered = _React$useState2[0],\n    setIsHovered = _React$useState2[1];\n  var onPointerDown = React.useCallback(function (e) {\n    if (displayValues) {\n      divRef.current.innerText = \"\".concat(translation.current[(axis + 1) % 3].toFixed(2), \", \").concat(translation.current[(axis + 2) % 3].toFixed(2));\n      divRef.current.style.display = 'block';\n    }\n    e.stopPropagation();\n    var clickPoint = e.point.clone();\n    var origin = new THREE.Vector3().setFromMatrixPosition(objRef.current.matrixWorld);\n    var e1 = new THREE.Vector3().setFromMatrixColumn(objRef.current.matrixWorld, 0).normalize();\n    var e2 = new THREE.Vector3().setFromMatrixColumn(objRef.current.matrixWorld, 1).normalize();\n    var normal = new THREE.Vector3().setFromMatrixColumn(objRef.current.matrixWorld, 2).normalize();\n    var plane = new THREE.Plane().setFromNormalAndCoplanarPoint(normal, origin);\n    clickInfo.current = {\n      clickPoint: clickPoint,\n      e1: e1,\n      e2: e2,\n      plane: plane\n    };\n    offsetX0.current = translation.current[(axis + 1) % 3];\n    offsetY0.current = translation.current[(axis + 2) % 3];\n    onDragStart({\n      component: 'Slider',\n      axis: axis,\n      origin: origin,\n      directions: [e1, e2, normal]\n    });\n    camControls && (camControls.enabled = false); // @ts-ignore\n\n    e.target.setPointerCapture(e.pointerId);\n  }, [camControls, onDragStart, axis]);\n  var onPointerMove = React.useCallback(function (e) {\n    e.stopPropagation();\n    if (!isHovered) setIsHovered(true);\n    if (clickInfo.current) {\n      var _clickInfo$current = clickInfo.current,\n        clickPoint = _clickInfo$current.clickPoint,\n        e1 = _clickInfo$current.e1,\n        e2 = _clickInfo$current.e2,\n        plane = _clickInfo$current.plane;\n      var _ref2 = (translationLimits == null ? void 0 : translationLimits[(axis + 1) % 3]) || [undefined, undefined],\n        _ref3 = _slicedToArray(_ref2, 2),\n        minX = _ref3[0],\n        maxX = _ref3[1];\n      var _ref4 = (translationLimits == null ? void 0 : translationLimits[(axis + 2) % 3]) || [undefined, undefined],\n        _ref5 = _slicedToArray(_ref4, 2),\n        minY = _ref5[0],\n        maxY = _ref5[1];\n      ray.copy(e.ray);\n      ray.intersectPlane(plane, intersection);\n      ray.direction.negate();\n      ray.intersectPlane(plane, intersection);\n      intersection.sub(clickPoint);\n      var _decomposeIntoBasis = decomposeIntoBasis(e1, e2, intersection),\n        _decomposeIntoBasis2 = _slicedToArray(_decomposeIntoBasis, 2),\n        offsetX = _decomposeIntoBasis2[0],\n        offsetY = _decomposeIntoBasis2[1];\n      /* let offsetY = (intersection.y - (intersection.x * e1.y) / e1.x) / (e2.y - (e2.x * e1.y) / e1.x)\n      let offsetX = (intersection.x - offsetY * e2.x) / e1.x */\n\n      if (minX !== undefined) {\n        offsetX = Math.max(offsetX, minX - offsetX0.current);\n      }\n      if (maxX !== undefined) {\n        offsetX = Math.min(offsetX, maxX - offsetX0.current);\n      }\n      if (minY !== undefined) {\n        offsetY = Math.max(offsetY, minY - offsetY0.current);\n      }\n      if (maxY !== undefined) {\n        offsetY = Math.min(offsetY, maxY - offsetY0.current);\n      }\n      translation.current[(axis + 1) % 3] = offsetX0.current + offsetX;\n      translation.current[(axis + 2) % 3] = offsetY0.current + offsetY;\n      if (displayValues) {\n        divRef.current.innerText = \"\".concat(translation.current[(axis + 1) % 3].toFixed(2), \", \").concat(translation.current[(axis + 2) % 3].toFixed(2));\n      }\n      offsetMatrix.makeTranslation(offsetX * e1.x + offsetY * e2.x, offsetX * e1.y + offsetY * e2.y, offsetX * e1.z + offsetY * e2.z);\n      onDrag(offsetMatrix);\n    }\n  }, [onDrag, isHovered, translation, translationLimits, axis]);\n  var onPointerUp = React.useCallback(function (e) {\n    if (displayValues) {\n      divRef.current.style.display = 'none';\n    }\n    e.stopPropagation();\n    clickInfo.current = null;\n    onDragEnd();\n    camControls && (camControls.enabled = true); // @ts-ignore\n\n    e.target.releasePointerCapture(e.pointerId);\n  }, [camControls, onDragEnd]);\n  var onPointerOut = React.useCallback(function (e) {\n    e.stopPropagation();\n    setIsHovered(false);\n  }, []);\n  var matrixL = React.useMemo(function () {\n    var dir1N = dir1.clone().normalize();\n    var dir2N = dir2.clone().normalize();\n    return new THREE.Matrix4().makeBasis(dir1N, dir2N, dir1N.clone().cross(dir2N));\n  }, [dir1, dir2]);\n  var pos1 = fixed ? 1 / 7 : scale / 7;\n  var length = fixed ? 0.225 : scale * 0.225;\n  var color = isHovered ? hoveredColor : axisColors[axis];\n  var points = React.useMemo(function () {\n    return [new THREE.Vector3(0, 0, 0), new THREE.Vector3(0, length, 0), new THREE.Vector3(length, length, 0), new THREE.Vector3(length, 0, 0), new THREE.Vector3(0, 0, 0)];\n  }, [length]);\n  return /*#__PURE__*/React.createElement(\"group\", {\n    ref: objRef,\n    matrix: matrixL,\n    matrixAutoUpdate: false\n  }, /*#__PURE__*/React.createElement(Html, {\n    position: [0, 0, 0]\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: 'none',\n      background: '#151520',\n      color: 'white',\n      padding: '6px 8px',\n      borderRadius: 7,\n      whiteSpace: 'nowrap'\n    },\n    className: annotationsClass,\n    ref: divRef\n  })), /*#__PURE__*/React.createElement(\"group\", {\n    position: [pos1 * 1.7, pos1 * 1.7, 0]\n  }, /*#__PURE__*/React.createElement(\"mesh\", {\n    visible: true,\n    onPointerDown: onPointerDown,\n    onPointerMove: onPointerMove,\n    onPointerUp: onPointerUp,\n    onPointerOut: onPointerOut,\n    scale: length,\n    userData: userData\n  }, /*#__PURE__*/React.createElement(\"planeGeometry\", null), /*#__PURE__*/React.createElement(\"meshBasicMaterial\", {\n    transparent: true,\n    depthTest: depthTest,\n    color: color,\n    polygonOffset: true,\n    polygonOffsetFactor: -10,\n    side: THREE.DoubleSide\n  })), /*#__PURE__*/React.createElement(Line, {\n    position: [-length / 2, -length / 2, 0],\n    transparent: true,\n    depthTest: depthTest,\n    points: points,\n    lineWidth: lineWidth,\n    color: color,\n    opacity: opacity,\n    polygonOffset: true,\n    polygonOffsetFactor: -10,\n    userData: userData\n  })));\n};\nexport { PlaneSlider };","map":null,"metadata":{},"sourceType":"module"}