{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/baic/Documents/programm/gsrlic/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"/Users/baic/Documents/programm/gsrlic/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/baic/Documents/programm/gsrlic/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/baic/Documents/programm/gsrlic/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/baic/Documents/programm/gsrlic/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { ShaderMaterial, Material } from 'three';\nimport { getNodesKeys } from '../core/NodeUtils.js';\nvar NodeMaterial = /*#__PURE__*/function (_ShaderMaterial) {\n  _inherits(NodeMaterial, _ShaderMaterial);\n  var _super = _createSuper(NodeMaterial);\n  function NodeMaterial() {\n    var _this;\n    _classCallCheck(this, NodeMaterial);\n    _this = _super.call(this);\n    _this.type = _this.constructor.name;\n    _this.lights = true;\n    return _this;\n  }\n  _createClass(NodeMaterial, [{\n    key: \"setDefaultValues\",\n    value: function setDefaultValues(values) {\n      // This approach is to reuse the native refreshUniforms*\n      // and turn available the use of features like transmission and environment in core\n      var value;\n      for (var property in values) {\n        value = values[property];\n        if (this[property] === undefined) {\n          if (value && typeof value.clone === 'function') {\n            this[property] = value.clone();\n          } else {\n            this[property] = value;\n          }\n        }\n      }\n      Object.assign(this.defines, values.defines);\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON(meta) {\n      var isRoot = meta === undefined || typeof meta === 'string';\n      if (isRoot) {\n        meta = {\n          textures: {},\n          images: {},\n          nodes: {}\n        };\n      }\n      var data = Material.prototype.toJSON.call(this, meta);\n      var nodeKeys = getNodesKeys(this);\n      data.inputNodes = {};\n      var _iterator = _createForOfIteratorHelper(nodeKeys),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var name = _step.value;\n          data.inputNodes[name] = this[name].toJSON(meta).uuid;\n        } // TODO: Copied from Object3D.toJSON\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      function extractFromCache(cache) {\n        var values = [];\n        for (var key in cache) {\n          var _data = cache[key];\n          delete _data.metadata;\n          values.push(_data);\n        }\n        return values;\n      }\n      if (isRoot) {\n        var textures = extractFromCache(meta.textures);\n        var images = extractFromCache(meta.images);\n        var nodes = extractFromCache(meta.nodes);\n        if (textures.length > 0) data.textures = textures;\n        if (images.length > 0) data.images = images;\n        if (nodes.length > 0) data.nodes = nodes;\n      }\n      return data;\n    }\n  }]);\n  return NodeMaterial;\n}(ShaderMaterial);\nNodeMaterial.prototype.isNodeMaterial = true;\nexport default NodeMaterial;","map":null,"metadata":{},"sourceType":"module"}