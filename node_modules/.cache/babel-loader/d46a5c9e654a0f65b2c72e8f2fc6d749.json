{"ast":null,"code":"import _objectWithoutProperties from \"/Users/baic/Documents/programm/gsrlic/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _slicedToArray from \"/Users/baic/Documents/programm/gsrlic/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _excluded = [\"children\", \"weight\", \"transform\", \"instances\", \"mesh\", \"count\"];\nimport _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { MeshSurfaceSampler } from 'three-stdlib';\nimport { InstancedBufferAttribute, Vector3, Color, Object3D } from 'three';\nfunction useSurfaceSampler(mesh) {\n  var count = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 16;\n  var transform = arguments.length > 2 ? arguments[2] : undefined;\n  var weight = arguments.length > 3 ? arguments[3] : undefined;\n  var instanceMesh = arguments.length > 4 ? arguments[4] : undefined;\n  var _React$useState = React.useState(function () {\n      var arr = Array.from({\n        length: count\n      }, function () {\n        return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n      }).flat();\n      return new InstancedBufferAttribute(Float32Array.from(arr), 16);\n    }),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    buffer = _React$useState2[0],\n    setBuffer = _React$useState2[1];\n  React.useEffect(function () {\n    if (typeof mesh.current === 'undefined') return;\n    var sampler = new MeshSurfaceSampler(mesh.current);\n    if (weight) {\n      sampler.setWeightAttribute(weight);\n    }\n    sampler.build();\n    var position = new Vector3();\n    var normal = new Vector3();\n    var color = new Color();\n    var dummy = new Object3D();\n    mesh.current.updateMatrixWorld(true);\n    for (var i = 0; i < count; i++) {\n      sampler.sample(position, normal, color);\n      if (typeof transform === 'function') {\n        transform({\n          dummy: dummy,\n          sampledMesh: mesh.current,\n          position: position,\n          normal: normal,\n          color: color\n        }, i);\n      } else {\n        dummy.position.copy(position);\n      }\n      dummy.updateMatrix();\n      if (instanceMesh != null && instanceMesh.current) {\n        instanceMesh.current.setMatrixAt(i, dummy.matrix);\n      }\n      dummy.matrix.toArray(buffer.array, i * 16);\n    }\n    if (instanceMesh != null && instanceMesh.current) {\n      instanceMesh.current.instanceMatrix.needsUpdate = true;\n    }\n    buffer.needsUpdate = true;\n    setBuffer(buffer.clone());\n  }, [mesh, instanceMesh, weight, count, transform]);\n  return buffer;\n}\nfunction Sampler(_ref) {\n  var children = _ref.children,\n    weight = _ref.weight,\n    transform = _ref.transform,\n    instances = _ref.instances,\n    mesh = _ref.mesh,\n    _ref$count = _ref.count,\n    count = _ref$count === void 0 ? 16 : _ref$count,\n    props = _objectWithoutProperties(_ref, _excluded);\n  var group = React.useRef(null);\n  var instancedRef = React.useRef(null);\n  var meshToSampleRef = React.useRef(null);\n  React.useEffect(function () {\n    var _instances$current, _mesh$current;\n    instancedRef.current = (_instances$current = instances == null ? void 0 : instances.current) !== null && _instances$current !== void 0 ? _instances$current : group.current.children.find(function (c) {\n      return c.hasOwnProperty('instanceMatrix');\n    });\n    meshToSampleRef.current = (_mesh$current = mesh == null ? void 0 : mesh.current) !== null && _mesh$current !== void 0 ? _mesh$current : group.current.children.find(function (c) {\n      return c.type === 'Mesh';\n    });\n  }, [children, mesh == null ? void 0 : mesh.current, instances == null ? void 0 : instances.current]);\n  useSurfaceSampler(meshToSampleRef, count, transform, weight, instancedRef);\n  return /*#__PURE__*/React.createElement(\"group\", _extends({\n    ref: group\n  }, props), children);\n}\nexport { Sampler, useSurfaceSampler };","map":null,"metadata":{},"sourceType":"module"}