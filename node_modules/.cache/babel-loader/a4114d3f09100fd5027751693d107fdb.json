{"ast":null,"code":"import _createForOfIteratorHelper from \"C:\\\\Users\\\\clent\\\\OneDrive\\\\Documents\\\\gsrlic\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"C:\\\\Users\\\\clent\\\\OneDrive\\\\Documents\\\\gsrlic\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\clent\\\\OneDrive\\\\Documents\\\\gsrlic\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport { Absorber } from \"./Options/Classes/Absorber\";\nimport { AbsorberInstance } from \"./AbsorberInstance\";\nimport { itemFromArray } from \"../../Utils/Utils\";\nexport var Absorbers = /*#__PURE__*/function () {\n  function Absorbers(container) {\n    var _this = this;\n    _classCallCheck(this, Absorbers);\n    this.container = container;\n    this.array = [];\n    this.absorbers = [];\n    this.interactivityAbsorbers = [];\n    var overridableContainer = container;\n    overridableContainer.getAbsorber = function (idxOrName) {\n      return idxOrName === undefined || typeof idxOrName === \"number\" ? _this.array[idxOrName || 0] : _this.array.find(function (t) {\n        return t.name === idxOrName;\n      });\n    };\n    overridableContainer.addAbsorber = function (options, position) {\n      return _this.addAbsorber(options, position);\n    };\n  }\n  _createClass(Absorbers, [{\n    key: \"init\",\n    value: function init(options) {\n      var _a, _b;\n      if (!options) {\n        return;\n      }\n      if (options.absorbers) {\n        if (options.absorbers instanceof Array) {\n          this.absorbers = options.absorbers.map(function (s) {\n            var tmp = new Absorber();\n            tmp.load(s);\n            return tmp;\n          });\n        } else {\n          if (this.absorbers instanceof Array) {\n            this.absorbers = new Absorber();\n          }\n          this.absorbers.load(options.absorbers);\n        }\n      }\n      var interactivityAbsorbers = (_b = (_a = options.interactivity) === null || _a === void 0 ? void 0 : _a.modes) === null || _b === void 0 ? void 0 : _b.absorbers;\n      if (interactivityAbsorbers) {\n        if (interactivityAbsorbers instanceof Array) {\n          this.interactivityAbsorbers = interactivityAbsorbers.map(function (s) {\n            var tmp = new Absorber();\n            tmp.load(s);\n            return tmp;\n          });\n        } else {\n          if (this.interactivityAbsorbers instanceof Array) {\n            this.interactivityAbsorbers = new Absorber();\n          }\n          this.interactivityAbsorbers.load(interactivityAbsorbers);\n        }\n      }\n      if (this.absorbers instanceof Array) {\n        var _iterator = _createForOfIteratorHelper(this.absorbers),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var absorberOptions = _step.value;\n            this.addAbsorber(absorberOptions);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      } else {\n        this.addAbsorber(this.absorbers);\n      }\n    }\n  }, {\n    key: \"particleUpdate\",\n    value: function particleUpdate(particle) {\n      var _iterator2 = _createForOfIteratorHelper(this.array),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var absorber = _step2.value;\n          absorber.attract(particle);\n          if (particle.destroyed) {\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(context) {\n      var _iterator3 = _createForOfIteratorHelper(this.array),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var absorber = _step3.value;\n          context.save();\n          absorber.draw(context);\n          context.restore();\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      this.array = [];\n    }\n  }, {\n    key: \"resize\",\n    value: function resize() {\n      var _iterator4 = _createForOfIteratorHelper(this.array),\n        _step4;\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var absorber = _step4.value;\n          absorber.resize();\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n    }\n  }, {\n    key: \"handleClickMode\",\n    value: function handleClickMode(mode) {\n      var absorberOptions = this.absorbers,\n        modeAbsorbers = this.interactivityAbsorbers;\n      if (mode === \"absorber\") {\n        var absorbersModeOptions;\n        if (modeAbsorbers instanceof Array) {\n          if (modeAbsorbers.length > 0) {\n            absorbersModeOptions = itemFromArray(modeAbsorbers);\n          }\n        } else {\n          absorbersModeOptions = modeAbsorbers;\n        }\n        var absorbersOptions = absorbersModeOptions !== null && absorbersModeOptions !== void 0 ? absorbersModeOptions : absorberOptions instanceof Array ? itemFromArray(absorberOptions) : absorberOptions,\n          aPosition = this.container.interactivity.mouse.clickPosition;\n        this.addAbsorber(absorbersOptions, aPosition);\n      }\n    }\n  }, {\n    key: \"addAbsorber\",\n    value: function addAbsorber(options, position) {\n      var absorber = new AbsorberInstance(this, this.container, options, position);\n      this.array.push(absorber);\n      return absorber;\n    }\n  }, {\n    key: \"removeAbsorber\",\n    value: function removeAbsorber(absorber) {\n      var index = this.array.indexOf(absorber);\n      if (index >= 0) {\n        this.array.splice(index, 1);\n      }\n    }\n  }]);\n  return Absorbers;\n}();","map":null,"metadata":{},"sourceType":"module"}