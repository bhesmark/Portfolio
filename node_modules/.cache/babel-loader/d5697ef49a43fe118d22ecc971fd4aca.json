{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/baic/Documents/programm/gsrlic/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"/Users/baic/Documents/programm/gsrlic/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/baic/Documents/programm/gsrlic/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/baic/Documents/programm/gsrlic/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/baic/Documents/programm/gsrlic/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport TempNode from './TempNode.js';\nvar FunctionCallNode = /*#__PURE__*/function (_TempNode) {\n  _inherits(FunctionCallNode, _TempNode);\n  var _super = _createSuper(FunctionCallNode);\n  function FunctionCallNode() {\n    var _this;\n    var functionNode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    var parameters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _classCallCheck(this, FunctionCallNode);\n    _this = _super.call(this);\n    _this.functionNode = functionNode;\n    _this.parameters = parameters;\n    return _this;\n  }\n  _createClass(FunctionCallNode, [{\n    key: \"setParameters\",\n    value: function setParameters(parameters) {\n      this.parameters = parameters;\n      return this;\n    }\n  }, {\n    key: \"getParameters\",\n    value: function getParameters() {\n      return this.parameters;\n    }\n  }, {\n    key: \"getNodeType\",\n    value: function getNodeType(builder) {\n      return this.functionNode.getNodeType(builder);\n    }\n  }, {\n    key: \"generate\",\n    value: function generate(builder) {\n      var params = [];\n      var functionNode = this.functionNode;\n      var inputs = functionNode.getInputs(builder);\n      var parameters = this.parameters;\n      var _iterator = _createForOfIteratorHelper(inputs),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var inputNode = _step.value;\n          var node = parameters[inputNode.name];\n          if (node !== undefined) {\n            params.push(node.build(builder, inputNode.type));\n          } else {\n            throw new Error(\"FunctionCallNode: Input '\".concat(inputNode.name, \"' not found in FunctionNode.\"));\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      var functionName = functionNode.build(builder, 'property');\n      return \"\".concat(functionName, \"( \").concat(params.join(', '), \" )\");\n    }\n  }]);\n  return FunctionCallNode;\n}(TempNode);\nexport default FunctionCallNode;","map":null,"metadata":{},"sourceType":"module"}