{"ast":null,"code":"import _createClass from \"/Users/baic/Documents/programm/gsrlic/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"/Users/baic/Documents/programm/gsrlic/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _assertThisInitialized from \"/Users/baic/Documents/programm/gsrlic/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/baic/Documents/programm/gsrlic/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/baic/Documents/programm/gsrlic/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Vector2, Group, Raycaster, Matrix4 } from 'three';\nvar _pointer = new Vector2();\nvar _event = {\n  type: '',\n  data: _pointer\n};\nvar InteractiveGroup = /*#__PURE__*/function (_Group) {\n  _inherits(InteractiveGroup, _Group);\n  var _super = _createSuper(InteractiveGroup);\n  function InteractiveGroup(renderer, camera) {\n    var _this;\n    _classCallCheck(this, InteractiveGroup);\n    _this = _super.call(this);\n    var scope = _assertThisInitialized(_this);\n    var raycaster = new Raycaster();\n    var tempMatrix = new Matrix4(); // Pointer Events\n\n    var element = renderer.domElement;\n    function onPointerEvent(event) {\n      event.stopPropagation();\n      _pointer.x = event.clientX / element.clientWidth * 2 - 1;\n      _pointer.y = -(event.clientY / element.clientHeight) * 2 + 1;\n      raycaster.setFromCamera(_pointer, camera);\n      var intersects = raycaster.intersectObjects(scope.children, false);\n      if (intersects.length > 0) {\n        var intersection = intersects[0];\n        var object = intersection.object;\n        var uv = intersection.uv;\n        _event.type = event.type;\n        _event.data.set(uv.x, 1 - uv.y);\n        object.dispatchEvent(_event);\n      }\n    }\n    element.addEventListener('pointerdown', onPointerEvent);\n    element.addEventListener('pointerup', onPointerEvent);\n    element.addEventListener('pointermove', onPointerEvent);\n    element.addEventListener('mousedown', onPointerEvent);\n    element.addEventListener('mouseup', onPointerEvent);\n    element.addEventListener('mousemove', onPointerEvent);\n    element.addEventListener('click', onPointerEvent); // WebXR Controller Events\n    // TODO: Dispatch pointerevents too\n\n    var events = {\n      move: 'mousemove',\n      select: 'click',\n      selectstart: 'mousedown',\n      selectend: 'mouseup'\n    };\n    function onXRControllerEvent(event) {\n      var controller = event.target;\n      tempMatrix.identity().extractRotation(controller.matrixWorld);\n      raycaster.ray.origin.setFromMatrixPosition(controller.matrixWorld);\n      raycaster.ray.direction.set(0, 0, -1).applyMatrix4(tempMatrix);\n      var intersections = raycaster.intersectObjects(scope.children, false);\n      if (intersections.length > 0) {\n        var intersection = intersections[0];\n        var object = intersection.object;\n        var uv = intersection.uv;\n        _event.type = events[event.type];\n        _event.data.set(uv.x, 1 - uv.y);\n        object.dispatchEvent(_event);\n      }\n    }\n    var controller1 = renderer.xr.getController(0);\n    controller1.addEventListener('move', onXRControllerEvent);\n    controller1.addEventListener('select', onXRControllerEvent);\n    controller1.addEventListener('selectstart', onXRControllerEvent);\n    controller1.addEventListener('selectend', onXRControllerEvent);\n    var controller2 = renderer.xr.getController(1);\n    controller2.addEventListener('move', onXRControllerEvent);\n    controller2.addEventListener('select', onXRControllerEvent);\n    controller2.addEventListener('selectstart', onXRControllerEvent);\n    controller2.addEventListener('selectend', onXRControllerEvent);\n    return _this;\n  }\n  return _createClass(InteractiveGroup);\n}(Group);\nexport { InteractiveGroup };","map":null,"metadata":{},"sourceType":"module"}