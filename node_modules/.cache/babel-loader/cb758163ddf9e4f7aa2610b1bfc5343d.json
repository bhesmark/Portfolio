{"ast":null,"code":"import _objectWithoutProperties from \"/Users/baic/Documents/programm/gsrlic/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _objectSpread from \"/Users/baic/Documents/programm/gsrlic/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _excluded = [\"isChild\", \"object\", \"children\", \"deep\", \"castShadow\", \"receiveShadow\", \"inject\", \"keys\"],\n  _excluded2 = [\"children\"];\nimport _extends from '@babel/runtime/helpers/esm/extends';\nimport * as THREE from 'three';\nimport * as React from 'react';\nimport pick from 'lodash.pick';\nimport { SkeletonUtils } from 'three-stdlib';\nfunction createSpread(child, _ref) {\n  var _ref$keys = _ref.keys,\n    keys = _ref$keys === void 0 ? ['near', 'far', 'color', 'distance', 'decay', 'penumbra', 'angle', 'intensity', 'skeleton', 'visible', 'castShadow', 'receiveShadow', 'morphTargetDictionary', 'morphTargetInfluences', 'name', 'geometry', 'material', 'position', 'rotation', 'scale', 'up', 'userData', 'bindMode', 'bindMatrix', 'bindMatrixInverse', 'skeleton'] : _ref$keys,\n    deep = _ref.deep,\n    inject = _ref.inject,\n    castShadow = _ref.castShadow,\n    receiveShadow = _ref.receiveShadow;\n  var spread = pick(child, keys);\n  if (deep) {\n    if (spread.geometry && deep !== 'materialsOnly') spread.geometry = spread.geometry.clone();\n    if (spread.material && deep !== 'geometriesOnly') spread.material = spread.material.clone();\n  }\n  if (inject) {\n    if (typeof inject === 'function') spread = _objectSpread(_objectSpread({}, spread), {}, {\n      children: inject(child)\n    });else if ( /*#__PURE__*/React.isValidElement(inject)) spread = _objectSpread(_objectSpread({}, spread), {}, {\n      children: inject\n    });else spread = _objectSpread(_objectSpread({}, spread), inject);\n  }\n  if (child instanceof THREE.Mesh) {\n    if (castShadow) spread.castShadow = true;\n    if (receiveShadow) spread.receiveShadow = true;\n  }\n  return spread;\n}\nvar Clone = /*#__PURE__*/React.forwardRef(function (_ref2, forwardRef) {\n  var _ref2$isChild = _ref2.isChild,\n    isChild = _ref2$isChild === void 0 ? false : _ref2$isChild,\n    object = _ref2.object,\n    children = _ref2.children,\n    deep = _ref2.deep,\n    castShadow = _ref2.castShadow,\n    receiveShadow = _ref2.receiveShadow,\n    inject = _ref2.inject,\n    keys = _ref2.keys,\n    props = _objectWithoutProperties(_ref2, _excluded);\n  var _object;\n  var config = {\n    keys: keys,\n    deep: deep,\n    inject: inject,\n    castShadow: castShadow,\n    receiveShadow: receiveShadow\n  };\n  object = React.useMemo(function () {\n    if (isChild === false && !Array.isArray(object)) {\n      var isSkinned = false;\n      object.traverse(function (object) {\n        if (object.isSkinnedMesh) isSkinned = true;\n      });\n      if (isSkinned) return SkeletonUtils.clone(object);\n    }\n    return object;\n  }, [object, isChild]); // Deal with arrayed clones\n\n  if (Array.isArray(object)) {\n    return /*#__PURE__*/React.createElement(\"group\", _extends({}, props, {\n      ref: forwardRef\n    }), object.map(function (o) {\n      return /*#__PURE__*/React.createElement(Clone, _extends({\n        key: o.uuid,\n        object: o\n      }, config));\n    }), children);\n  } // Singleton clones\n\n  var _createSpread = createSpread(object, config),\n    injectChildren = _createSpread.children,\n    spread = _objectWithoutProperties(_createSpread, _excluded2);\n  var Element = object.type[0].toLowerCase() + object.type.slice(1);\n  return /*#__PURE__*/React.createElement(Element, _extends({}, spread, props, {\n    ref: forwardRef\n  }), ((_object = object) == null ? void 0 : _object.children).map(function (child) {\n    if (child.type === 'Bone') return /*#__PURE__*/React.createElement(\"primitive\", _extends({\n      key: child.uuid,\n      object: child\n    }, config));\n    return /*#__PURE__*/React.createElement(Clone, _extends({\n      key: child.uuid,\n      object: child\n    }, config, {\n      isChild: true\n    }));\n  }), children, injectChildren);\n});\nexport { Clone };","map":null,"metadata":{},"sourceType":"module"}