{"ast":null,"code":"import * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport SplineLoader from '@splinetool/loader';\nimport { ToastHeader } from 'react-bootstrap';\n\n// camera\nvar camera = new THREE.OrthographicCamera(window.innerWidth / -2, window.innerWidth / 2, window.innerHeight / 2, window.innerHeight / -2, -50000, 50000);\ncamera.position.set(40.96, 1.22, 1000);\ncamera.quaternion.setFromEuler(new THREE.Euler(0, 0, 0));\n\n// scene\nvar scene = new THREE.Scene();\n\n// spline scene\nvar loader = new SplineLoader();\nloader.load('https://prod.spline.design/mmAl-K70H2w7Tkyx/scene.splinecode', function (splineScene) {\n  scene.add(splineScene);\n});\n\n// renderer\nvar renderer = new THREE.WebGLRenderer({\n  antialias: true\n});\nrenderer.setSize(window.innerWidth, window.innerHeight);\nrenderer.setAnimationLoop(animate);\ndocument.body.appendChild(renderer.domElement);\n\n// scene settings\nrenderer.shadowMap.enabled = true;\nrenderer.shadowMap.type = THREE.PCFShadowMap;\nscene.background = new THREE.Color('#f2f2f2');\nrenderer.setClearAlpha(1);\n\n// orbit controls\nvar controls = new OrbitControls(camera, renderer.domElement);\ncontrols.enableDamping = true;\ncontrols.dampingFactor = 0.125;\nwindow.addEventListener('resize', onWindowResize);\nfunction onWindowResize() {\n  camera.left = window.innerWidth / -2;\n  camera.right = window.innerWidth / 2;\n  camera.top = window.innerHeight / 2;\n  camera.bottom = window.innerHeight / -2;\n  camera.updateProjectionMatrix();\n  renderer.setSize(window.innerWidth, window.innerHeight);\n}\nfunction animate(time) {\n  controls.update();\n  renderer.render(scene, camera);\n}","map":{"version":3,"names":["THREE","OrbitControls","SplineLoader","ToastHeader","camera","OrthographicCamera","window","innerWidth","innerHeight","position","set","quaternion","setFromEuler","Euler","scene","Scene","loader","load","splineScene","add","renderer","WebGLRenderer","antialias","setSize","setAnimationLoop","animate","document","body","appendChild","domElement","shadowMap","enabled","type","PCFShadowMap","background","Color","setClearAlpha","controls","enableDamping","dampingFactor","addEventListener","onWindowResize","left","right","top","bottom","updateProjectionMatrix","time","update","render"],"sources":["/Users/baic/Documents/programm/gsrlic/src/component/three/scene.js"],"sourcesContent":["import * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport SplineLoader from '@splinetool/loader';\nimport { ToastHeader } from 'react-bootstrap';\n\n// camera\nconst camera = new THREE.OrthographicCamera(window.innerWidth / - 2, window.innerWidth / 2, window.innerHeight / 2, window.innerHeight / - 2,  -50000, 50000);\ncamera.position.set(40.96, 1.22, 1000);\ncamera.quaternion.setFromEuler(new THREE.Euler(0, 0, 0));\n\n// scene\nconst scene = new THREE.Scene();\n\n// spline scene\nconst loader = new SplineLoader();\nloader.load(\n  'https://prod.spline.design/mmAl-K70H2w7Tkyx/scene.splinecode',\n  (splineScene) => {\n    scene.add(splineScene);\n  }\n);\n\n// renderer\nconst renderer = new THREE.WebGLRenderer({ antialias: true });\nrenderer.setSize(window.innerWidth, window.innerHeight);\nrenderer.setAnimationLoop(animate);\ndocument.body.appendChild(renderer.domElement);\n\n// scene settings\nrenderer.shadowMap.enabled = true;\nrenderer.shadowMap.type = THREE.PCFShadowMap;\n\nscene.background = new THREE.Color('#f2f2f2');\nrenderer.setClearAlpha(1);\n\n// orbit controls\nconst controls = new OrbitControls(camera, renderer.domElement);\ncontrols.enableDamping = true;\ncontrols.dampingFactor = 0.125;\n\nwindow.addEventListener('resize', onWindowResize);\nfunction onWindowResize() {\n  camera.left = window.innerWidth / - 2;\n  camera.right = window.innerWidth / 2;\n  camera.top = window.innerHeight / 2;\n  camera.bottom = window.innerHeight / - 2;\n  camera.updateProjectionMatrix();\n  renderer.setSize(window.innerWidth, window.innerHeight);\n}\n\nfunction animate(time) {\n  controls.update();\n  renderer.render(scene, camera);\n}"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,aAAa,QAAQ,8CAA8C;AAC5E,OAAOC,YAAY,MAAM,oBAAoB;AAC7C,SAASC,WAAW,QAAQ,iBAAiB;;AAE7C;AACA,IAAMC,MAAM,GAAG,IAAIJ,KAAK,CAACK,kBAAkB,CAACC,MAAM,CAACC,UAAU,GAAG,CAAE,CAAC,EAAED,MAAM,CAACC,UAAU,GAAG,CAAC,EAAED,MAAM,CAACE,WAAW,GAAG,CAAC,EAAEF,MAAM,CAACE,WAAW,GAAG,CAAE,CAAC,EAAG,CAAC,KAAK,EAAE,KAAK,CAAC;AAC7JJ,MAAM,CAACK,QAAQ,CAACC,GAAG,CAAC,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC;AACtCN,MAAM,CAACO,UAAU,CAACC,YAAY,CAAC,IAAIZ,KAAK,CAACa,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;;AAExD;AACA,IAAMC,KAAK,GAAG,IAAId,KAAK,CAACe,KAAK,EAAE;;AAE/B;AACA,IAAMC,MAAM,GAAG,IAAId,YAAY,EAAE;AACjCc,MAAM,CAACC,IAAI,CACT,8DAA8D,EAC9D,UAACC,WAAW,EAAK;EACfJ,KAAK,CAACK,GAAG,CAACD,WAAW,CAAC;AACxB,CAAC,CACF;;AAED;AACA,IAAME,QAAQ,GAAG,IAAIpB,KAAK,CAACqB,aAAa,CAAC;EAAEC,SAAS,EAAE;AAAK,CAAC,CAAC;AAC7DF,QAAQ,CAACG,OAAO,CAACjB,MAAM,CAACC,UAAU,EAAED,MAAM,CAACE,WAAW,CAAC;AACvDY,QAAQ,CAACI,gBAAgB,CAACC,OAAO,CAAC;AAClCC,QAAQ,CAACC,IAAI,CAACC,WAAW,CAACR,QAAQ,CAACS,UAAU,CAAC;;AAE9C;AACAT,QAAQ,CAACU,SAAS,CAACC,OAAO,GAAG,IAAI;AACjCX,QAAQ,CAACU,SAAS,CAACE,IAAI,GAAGhC,KAAK,CAACiC,YAAY;AAE5CnB,KAAK,CAACoB,UAAU,GAAG,IAAIlC,KAAK,CAACmC,KAAK,CAAC,SAAS,CAAC;AAC7Cf,QAAQ,CAACgB,aAAa,CAAC,CAAC,CAAC;;AAEzB;AACA,IAAMC,QAAQ,GAAG,IAAIpC,aAAa,CAACG,MAAM,EAAEgB,QAAQ,CAACS,UAAU,CAAC;AAC/DQ,QAAQ,CAACC,aAAa,GAAG,IAAI;AAC7BD,QAAQ,CAACE,aAAa,GAAG,KAAK;AAE9BjC,MAAM,CAACkC,gBAAgB,CAAC,QAAQ,EAAEC,cAAc,CAAC;AACjD,SAASA,cAAc,GAAG;EACxBrC,MAAM,CAACsC,IAAI,GAAGpC,MAAM,CAACC,UAAU,GAAG,CAAE,CAAC;EACrCH,MAAM,CAACuC,KAAK,GAAGrC,MAAM,CAACC,UAAU,GAAG,CAAC;EACpCH,MAAM,CAACwC,GAAG,GAAGtC,MAAM,CAACE,WAAW,GAAG,CAAC;EACnCJ,MAAM,CAACyC,MAAM,GAAGvC,MAAM,CAACE,WAAW,GAAG,CAAE,CAAC;EACxCJ,MAAM,CAAC0C,sBAAsB,EAAE;EAC/B1B,QAAQ,CAACG,OAAO,CAACjB,MAAM,CAACC,UAAU,EAAED,MAAM,CAACE,WAAW,CAAC;AACzD;AAEA,SAASiB,OAAO,CAACsB,IAAI,EAAE;EACrBV,QAAQ,CAACW,MAAM,EAAE;EACjB5B,QAAQ,CAAC6B,MAAM,CAACnC,KAAK,EAAEV,MAAM,CAAC;AAChC"},"metadata":{},"sourceType":"module"}