{"ast":null,"code":"import _objectWithoutProperties from \"/Users/baic/Documents/programm/gsrlic/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"aberrationStrength\", \"fastChroma\", \"envMap\"];\nimport _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { useRef, useMemo, useLayoutEffect } from 'react';\nimport { extend, useThree } from '@react-three/fiber';\nimport { MeshBVH, SAH } from 'three-mesh-bvh';\nimport { MeshRefractionMaterial as MeshRefractionMaterial$1 } from '../materials/MeshRefractionMaterial.js';\nvar isCubeTexture = function isCubeTexture(def) {\n  return def && def.isCubeTexture;\n};\nfunction MeshRefractionMaterial(_ref2) {\n  var _ref2$aberrationStren = _ref2.aberrationStrength,\n    aberrationStrength = _ref2$aberrationStren === void 0 ? 0 : _ref2$aberrationStren,\n    _ref2$fastChroma = _ref2.fastChroma,\n    fastChroma = _ref2$fastChroma === void 0 ? true : _ref2$fastChroma,\n    envMap = _ref2.envMap,\n    props = _objectWithoutProperties(_ref2, _excluded);\n  extend({\n    MeshRefractionMaterial: MeshRefractionMaterial$1\n  });\n  var material = useRef();\n  var _useThree = useThree(),\n    size = _useThree.size;\n  var defines = useMemo(function () {\n    var _ref, _envMap$image$;\n    var temp = {}; // Sampler2D and SamplerCube need different defines\n\n    var isCubeMap = isCubeTexture(envMap);\n    var w = (_ref = isCubeMap ? (_envMap$image$ = envMap.image[0]) == null ? void 0 : _envMap$image$.width : envMap.image.width) !== null && _ref !== void 0 ? _ref : 1024;\n    var cubeSize = w / 4;\n    var _lodMax = Math.floor(Math.log2(cubeSize));\n    var _cubeSize = Math.pow(2, _lodMax);\n    var width = 3 * Math.max(_cubeSize, 16 * 7);\n    var height = 4 * _cubeSize;\n    if (isCubeMap) temp.ENVMAP_TYPE_CUBEM = '';\n    temp.CUBEUV_TEXEL_WIDTH = \"\".concat(1.0 / width);\n    temp.CUBEUV_TEXEL_HEIGHT = \"\".concat(1.0 / height);\n    temp.CUBEUV_MAX_MIP = \"\".concat(_lodMax, \".0\"); // Add defines from chromatic aberration\n\n    if (aberrationStrength > 0) temp.CHROMATIC_ABERRATIONS = '';\n    if (fastChroma) temp.FAST_CHROMA = '';\n    return temp;\n  }, [aberrationStrength, fastChroma]);\n  useLayoutEffect(function () {\n    var _material$current, _material$current$__r, _material$current$__r2;\n\n    // Get the geometry of this materials parent\n    var geometry = (_material$current = material.current) == null ? void 0 : (_material$current$__r = _material$current.__r3f) == null ? void 0 : (_material$current$__r2 = _material$current$__r.parent) == null ? void 0 : _material$current$__r2.geometry; // Update the BVH\n\n    if (geometry) material.current.bvh.updateFrom(new MeshBVH(geometry.toNonIndexed(), {\n      lazyGeneration: false,\n      strategy: SAH\n    }));\n  }, []);\n  return /*#__PURE__*/React.createElement(\"meshRefractionMaterial\", _extends({\n    // @ts-ignore\n    key: JSON.stringify(defines) // @ts-ignore\n    ,\n\n    defines: defines,\n    ref: material,\n    resolution: [size.width, size.height],\n    aberrationStrength: aberrationStrength,\n    envMap: envMap\n  }, props));\n}\nexport { MeshRefractionMaterial };","map":null,"metadata":{},"sourceType":"module"}