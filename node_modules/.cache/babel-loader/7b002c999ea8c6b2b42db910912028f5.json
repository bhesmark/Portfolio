{"ast":null,"code":"import _classCallCheck from \"/Users/baic/Documents/programm/gsrlic/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/baic/Documents/programm/gsrlic/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/baic/Documents/programm/gsrlic/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/baic/Documents/programm/gsrlic/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport Node from '../core/Node.js';\nimport OperatorNode from '../math/OperatorNode.js';\nimport MaterialReferenceNode from './MaterialReferenceNode.js';\nvar MaterialNode = /*#__PURE__*/function (_Node) {\n  _inherits(MaterialNode, _Node);\n  var _super = _createSuper(MaterialNode);\n  function MaterialNode() {\n    var _this;\n    var scope = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : MaterialNode.COLOR;\n    _classCallCheck(this, MaterialNode);\n    _this = _super.call(this);\n    _this.scope = scope;\n    return _this;\n  }\n  _createClass(MaterialNode, [{\n    key: \"getNodeType\",\n    value: function getNodeType(builder) {\n      var scope = this.scope;\n      var material = builder.context.material;\n      if (scope === MaterialNode.COLOR) {\n        return material.map !== null ? 'vec4' : 'vec3';\n      } else if (scope === MaterialNode.OPACITY) {\n        return 'float';\n      } else if (scope === MaterialNode.SPECULAR) {\n        return 'vec3';\n      } else if (scope === MaterialNode.ROUGHNESS || scope === MaterialNode.METALNESS) {\n        return 'float';\n      }\n    }\n  }, {\n    key: \"generate\",\n    value: function generate(builder, output) {\n      var material = builder.context.material;\n      var scope = this.scope;\n      var node = null;\n      if (scope === MaterialNode.ALPHA_TEST) {\n        node = new MaterialReferenceNode('alphaTest', 'float');\n      } else if (scope === MaterialNode.COLOR) {\n        var colorNode = new MaterialReferenceNode('color', 'color');\n        if (material.map !== null && material.map !== undefined && material.map.isTexture === true) {\n          node = new OperatorNode('*', colorNode, new MaterialReferenceNode('map', 'texture'));\n        } else {\n          node = colorNode;\n        }\n      } else if (scope === MaterialNode.OPACITY) {\n        var opacityNode = new MaterialReferenceNode('opacity', 'float');\n        if (material.alphaMap !== null && material.alphaMap !== undefined && material.alphaMap.isTexture === true) {\n          node = new OperatorNode('*', opacityNode, new MaterialReferenceNode('alphaMap', 'texture'));\n        } else {\n          node = opacityNode;\n        }\n      } else if (scope === MaterialNode.SPECULAR) {\n        var specularColorNode = new MaterialReferenceNode('specularColor', 'color');\n        if (material.specularColorMap !== null && material.specularColorMap !== undefined && material.specularColorMap.isTexture === true) {\n          node = new OperatorNode('*', specularColorNode, new MaterialReferenceNode('specularColorMap', 'texture'));\n        } else {\n          node = specularColorNode;\n        }\n      } else {\n        var outputType = this.getNodeType(builder);\n        node = new MaterialReferenceNode(scope, outputType);\n      }\n      return node.build(builder, output);\n    }\n  }]);\n  return MaterialNode;\n}(Node);\n_defineProperty(MaterialNode, \"ALPHA_TEST\", 'alphaTest');\n_defineProperty(MaterialNode, \"COLOR\", 'color');\n_defineProperty(MaterialNode, \"OPACITY\", 'opacity');\n_defineProperty(MaterialNode, \"SPECULAR\", 'specular');\n_defineProperty(MaterialNode, \"ROUGHNESS\", 'roughness');\n_defineProperty(MaterialNode, \"METALNESS\", 'metalness');\nexport default MaterialNode;","map":null,"metadata":{},"sourceType":"module"}