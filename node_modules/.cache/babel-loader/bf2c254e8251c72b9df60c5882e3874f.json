{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/baic/Downloads/gsrlic/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"/Users/baic/Downloads/gsrlic/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/baic/Downloads/gsrlic/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Circle } from \"./Circle\";\nimport { CircleWarp } from \"./CircleWarp\";\nimport { Rectangle } from \"./Rectangle\";\nimport { getDistance } from \"../../Utils/NumberUtils\";\nexport var QuadTree = /*#__PURE__*/function () {\n  function QuadTree(rectangle, capacity) {\n    _classCallCheck(this, QuadTree);\n    this.rectangle = rectangle;\n    this.capacity = capacity;\n    this.points = [];\n    this.divided = false;\n  }\n  _createClass(QuadTree, [{\n    key: \"insert\",\n    value: function insert(point) {\n      var _a, _b, _c, _d, _e;\n      if (!this.rectangle.contains(point.position)) {\n        return false;\n      }\n      if (this.points.length < this.capacity) {\n        this.points.push(point);\n        return true;\n      }\n      if (!this.divided) {\n        this.subdivide();\n      }\n      return (_e = ((_a = this.northEast) === null || _a === void 0 ? void 0 : _a.insert(point)) || ((_b = this.northWest) === null || _b === void 0 ? void 0 : _b.insert(point)) || ((_c = this.southEast) === null || _c === void 0 ? void 0 : _c.insert(point)) || ((_d = this.southWest) === null || _d === void 0 ? void 0 : _d.insert(point))) !== null && _e !== void 0 ? _e : false;\n    }\n  }, {\n    key: \"queryCircle\",\n    value: function queryCircle(position, radius) {\n      return this.query(new Circle(position.x, position.y, radius));\n    }\n  }, {\n    key: \"queryCircleWarp\",\n    value: function queryCircleWarp(position, radius, containerOrSize) {\n      var container = containerOrSize,\n        size = containerOrSize;\n      return this.query(new CircleWarp(position.x, position.y, radius, container.canvas !== undefined ? container.canvas.size : size));\n    }\n  }, {\n    key: \"queryRectangle\",\n    value: function queryRectangle(position, size) {\n      return this.query(new Rectangle(position.x, position.y, size.width, size.height));\n    }\n  }, {\n    key: \"query\",\n    value: function query(range, found) {\n      var _a, _b, _c, _d;\n      var res = found !== null && found !== void 0 ? found : [];\n      if (!range.intersects(this.rectangle)) {\n        return [];\n      }\n      var _iterator = _createForOfIteratorHelper(this.points),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var p = _step.value;\n          if (!range.contains(p.position) && getDistance(range.position, p.position) > p.particle.getRadius()) {\n            continue;\n          }\n          res.push(p.particle);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      if (this.divided) {\n        (_a = this.northEast) === null || _a === void 0 ? void 0 : _a.query(range, res);\n        (_b = this.northWest) === null || _b === void 0 ? void 0 : _b.query(range, res);\n        (_c = this.southEast) === null || _c === void 0 ? void 0 : _c.query(range, res);\n        (_d = this.southWest) === null || _d === void 0 ? void 0 : _d.query(range, res);\n      }\n      return res;\n    }\n  }, {\n    key: \"subdivide\",\n    value: function subdivide() {\n      var x = this.rectangle.position.x,\n        y = this.rectangle.position.y,\n        w = this.rectangle.size.width,\n        h = this.rectangle.size.height,\n        capacity = this.capacity;\n      this.northEast = new QuadTree(new Rectangle(x, y, w / 2, h / 2), capacity);\n      this.northWest = new QuadTree(new Rectangle(x + w / 2, y, w / 2, h / 2), capacity);\n      this.southEast = new QuadTree(new Rectangle(x, y + h / 2, w / 2, h / 2), capacity);\n      this.southWest = new QuadTree(new Rectangle(x + w / 2, y + h / 2, w / 2, h / 2), capacity);\n      this.divided = true;\n    }\n  }]);\n  return QuadTree;\n}();","map":null,"metadata":{},"sourceType":"module"}