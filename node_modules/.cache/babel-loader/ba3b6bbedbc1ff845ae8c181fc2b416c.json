{"ast":null,"code":"import _toConsumableArray from \"/Users/baic/Documents/programm/gsrlic/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/Users/baic/Documents/programm/gsrlic/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/Users/baic/Documents/programm/gsrlic/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"/Users/baic/Documents/programm/gsrlic/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/baic/Documents/programm/gsrlic/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/baic/Documents/programm/gsrlic/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/baic/Documents/programm/gsrlic/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _excluded = [\"children\", \"range\", \"limit\"],\n  _excluded2 = [\"children\"],\n  _excluded3 = [\"children\", \"positions\", \"colors\", \"sizes\", \"stride\"];\nimport _extends from '@babel/runtime/helpers/esm/extends';\nimport * as THREE from 'three';\nimport * as React from 'react';\nimport { extend, useFrame } from '@react-three/fiber';\nimport mergeRefs from 'react-merge-refs';\nvar _inverseMatrix = /*@__PURE__*/new THREE.Matrix4();\nvar _ray = /*@__PURE__*/new THREE.Ray();\nvar _sphere = /*@__PURE__*/new THREE.Sphere();\nvar _position = /*@__PURE__*/new THREE.Vector3();\nvar PositionPoint = /*#__PURE__*/function (_THREE$Group) {\n  _inherits(PositionPoint, _THREE$Group);\n  var _super = _createSuper(PositionPoint);\n  function PositionPoint() {\n    var _this;\n    _classCallCheck(this, PositionPoint);\n    _this = _super.call(this);\n    _this.size = 0;\n    _this.color = new THREE.Color('white');\n    _this.instance = {\n      current: undefined\n    };\n    _this.instanceKey = {\n      current: undefined\n    };\n    return _this;\n  } // This will allow the virtual instance have bounds\n  _createClass(PositionPoint, [{\n    key: \"geometry\",\n    get: function get() {\n      var _this$instance$curren;\n      return (_this$instance$curren = this.instance.current) == null ? void 0 : _this$instance$curren.geometry;\n    }\n  }, {\n    key: \"raycast\",\n    value: function raycast(raycaster, intersects) {\n      var _raycaster$params$Poi, _raycaster$params$Poi2;\n      var parent = this.instance.current;\n      if (!parent || !parent.geometry) return;\n      var instanceId = parent.userData.instances.indexOf(this.instanceKey); // If the instance wasn't found or exceeds the parents draw range, bail out\n\n      if (instanceId === -1 || instanceId > parent.geometry.drawRange.count) return;\n      var threshold = (_raycaster$params$Poi = (_raycaster$params$Poi2 = raycaster.params.Points) == null ? void 0 : _raycaster$params$Poi2.threshold) !== null && _raycaster$params$Poi !== void 0 ? _raycaster$params$Poi : 1;\n      _sphere.set(this.getWorldPosition(_position), threshold);\n      if (raycaster.ray.intersectsSphere(_sphere) === false) return;\n      _inverseMatrix.copy(parent.matrixWorld).invert();\n      _ray.copy(raycaster.ray).applyMatrix4(_inverseMatrix);\n      var localThreshold = threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3);\n      var localThresholdSq = localThreshold * localThreshold;\n      var rayPointDistanceSq = _ray.distanceSqToPoint(_position);\n      if (rayPointDistanceSq < localThresholdSq) {\n        var intersectPoint = new THREE.Vector3();\n        _ray.closestPointToPoint(_position, intersectPoint);\n        intersectPoint.applyMatrix4(this.matrixWorld);\n        var distance = raycaster.ray.origin.distanceTo(intersectPoint);\n        if (distance < raycaster.near || distance > raycaster.far) return;\n        intersects.push({\n          distance: distance,\n          distanceToRay: Math.sqrt(rayPointDistanceSq),\n          point: intersectPoint,\n          index: instanceId,\n          face: null,\n          object: this\n        });\n      }\n    }\n  }]);\n  return PositionPoint;\n}(THREE.Group);\nvar i, positionRef;\nvar context = /*@__PURE__*/React.createContext(null);\nvar parentMatrix = /*@__PURE__*/new THREE.Matrix4();\nvar position = /*@__PURE__*/new THREE.Vector3();\n/**\n * Instance implementation, relies on react + context to update the attributes based on the children of this component\n */\n\nvar PointsInstances = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var children = _ref.children,\n    range = _ref.range,\n    _ref$limit = _ref.limit,\n    limit = _ref$limit === void 0 ? 1000 : _ref$limit,\n    props = _objectWithoutProperties(_ref, _excluded);\n  var parentRef = React.useRef(null);\n  var _React$useState = React.useState([]),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    refs = _React$useState2[0],\n    setRefs = _React$useState2[1];\n  var _React$useState3 = React.useState(function () {\n      return [new Float32Array(limit * 3), Float32Array.from({\n        length: limit * 3\n      }, function () {\n        return 1;\n      }), Float32Array.from({\n        length: limit\n      }, function () {\n        return 1;\n      })];\n    }),\n    _React$useState4 = _slicedToArray(_React$useState3, 1),\n    _React$useState4$ = _slicedToArray(_React$useState4[0], 3),\n    positions = _React$useState4$[0],\n    colors = _React$useState4$[1],\n    sizes = _React$useState4$[2];\n  React.useEffect(function () {\n    // We might be a frame too late? ü§∑‚Äç‚ôÇÔ∏è\n    parentRef.current.geometry.attributes.position.needsUpdate = true;\n  });\n  useFrame(function () {\n    parentRef.current.updateMatrix();\n    parentRef.current.updateMatrixWorld();\n    parentMatrix.copy(parentRef.current.matrixWorld).invert();\n    parentRef.current.geometry.drawRange.count = Math.min(limit, range !== undefined ? range : limit, refs.length);\n    for (i = 0; i < refs.length; i++) {\n      positionRef = refs[i].current;\n      positionRef.getWorldPosition(position).applyMatrix4(parentMatrix);\n      position.toArray(positions, i * 3);\n      parentRef.current.geometry.attributes.position.needsUpdate = true;\n      positionRef.matrixWorldNeedsUpdate = true;\n      positionRef.color.toArray(colors, i * 3);\n      parentRef.current.geometry.attributes.color.needsUpdate = true;\n      sizes.set([positionRef.size], i);\n      parentRef.current.geometry.attributes.size.needsUpdate = true;\n    }\n  });\n  var api = React.useMemo(function () {\n    return {\n      getParent: function getParent() {\n        return parentRef;\n      },\n      subscribe: function subscribe(ref) {\n        setRefs(function (refs) {\n          return [].concat(_toConsumableArray(refs), [ref]);\n        });\n        return function () {\n          return setRefs(function (refs) {\n            return refs.filter(function (item) {\n              return item.current !== ref.current;\n            });\n          });\n        };\n      }\n    };\n  }, []);\n  return /*#__PURE__*/React.createElement(\"points\", _extends({\n    userData: {\n      instances: refs\n    },\n    matrixAutoUpdate: false,\n    ref: mergeRefs([ref, parentRef]),\n    raycast: function raycast() {\n      return null;\n    }\n  }, props), /*#__PURE__*/React.createElement(\"bufferGeometry\", null, /*#__PURE__*/React.createElement(\"bufferAttribute\", {\n    attach: \"attributes-position\",\n    count: positions.length / 3,\n    array: positions,\n    itemSize: 3,\n    usage: THREE.DynamicDrawUsage\n  }), /*#__PURE__*/React.createElement(\"bufferAttribute\", {\n    attach: \"attributes-color\",\n    count: colors.length / 3,\n    array: colors,\n    itemSize: 3,\n    usage: THREE.DynamicDrawUsage\n  }), /*#__PURE__*/React.createElement(\"bufferAttribute\", {\n    attach: \"attributes-size\",\n    count: sizes.length,\n    array: sizes,\n    itemSize: 1,\n    usage: THREE.DynamicDrawUsage\n  })), /*#__PURE__*/React.createElement(context.Provider, {\n    value: api\n  }, children));\n});\nvar Point = /*#__PURE__*/React.forwardRef(function (_ref2, ref) {\n  var children = _ref2.children,\n    props = _objectWithoutProperties(_ref2, _excluded2);\n  React.useMemo(function () {\n    return extend({\n      PositionPoint: PositionPoint\n    });\n  }, []);\n  var group = React.useRef();\n  var _React$useContext = React.useContext(context),\n    subscribe = _React$useContext.subscribe,\n    getParent = _React$useContext.getParent;\n  React.useLayoutEffect(function () {\n    return subscribe(group);\n  }, []);\n  return /*#__PURE__*/React.createElement(\"positionPoint\", _extends({\n    instance: getParent(),\n    instanceKey: group,\n    ref: mergeRefs([ref, group])\n  }, props), children);\n});\n/**\n * Buffer implementation, relies on complete buffers of the correct number, leaves it to the user to update them\n */\n\nvar PointsBuffer = /*#__PURE__*/React.forwardRef(function (_ref3, forwardedRef) {\n  var children = _ref3.children,\n    positions = _ref3.positions,\n    colors = _ref3.colors,\n    sizes = _ref3.sizes,\n    _ref3$stride = _ref3.stride,\n    stride = _ref3$stride === void 0 ? 3 : _ref3$stride,\n    props = _objectWithoutProperties(_ref3, _excluded3);\n  var pointsRef = React.useRef(null);\n  useFrame(function () {\n    var attr = pointsRef.current.geometry.attributes;\n    attr.position.needsUpdate = true;\n    if (colors) attr.color.needsUpdate = true;\n    if (sizes) attr.size.needsUpdate = true;\n  });\n  return /*#__PURE__*/React.createElement(\"points\", _extends({\n    ref: mergeRefs([forwardedRef, pointsRef])\n  }, props), /*#__PURE__*/React.createElement(\"bufferGeometry\", null, /*#__PURE__*/React.createElement(\"bufferAttribute\", {\n    attach: \"attributes-position\",\n    count: positions.length / stride,\n    array: positions,\n    itemSize: stride,\n    usage: THREE.DynamicDrawUsage\n  }), colors && /*#__PURE__*/React.createElement(\"bufferAttribute\", {\n    attach: \"attributes-color\",\n    count: colors.length / stride,\n    array: colors,\n    itemSize: 3,\n    usage: THREE.DynamicDrawUsage\n  }), sizes && /*#__PURE__*/React.createElement(\"bufferAttribute\", {\n    attach: \"attributes-size\",\n    count: sizes.length / stride,\n    array: sizes,\n    itemSize: 1,\n    usage: THREE.DynamicDrawUsage\n  })), children);\n});\nvar Points = /*#__PURE__*/React.forwardRef(function (props, forwardedRef) {\n  if (props.positions instanceof Float32Array) {\n    return /*#__PURE__*/React.createElement(PointsBuffer, _extends({}, props, {\n      ref: forwardedRef\n    }));\n  } else return /*#__PURE__*/React.createElement(PointsInstances, _extends({}, props, {\n    ref: forwardedRef\n  }));\n});\nexport { Point, Points, PointsBuffer, PositionPoint };","map":null,"metadata":{},"sourceType":"module"}