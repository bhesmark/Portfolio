{"ast":null,"code":"import _construct from \"/Users/baic/Documents/programm/gsrlic/node_modules/@babel/runtime/helpers/esm/construct\";\nimport _toConsumableArray from \"/Users/baic/Documents/programm/gsrlic/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport * as THREE from 'three';\nimport * as React from 'react';\nimport { useThree, useFrame } from '@react-three/fiber';\nimport { AxisArrow } from './AxisArrow.js';\nimport { PlaneSlider } from './PlaneSlider.js';\nimport { AxisRotator } from './AxisRotator.js';\nimport { context } from './context.js';\nvar tV0 = new THREE.Vector3();\nvar tV1 = new THREE.Vector3();\nvar tV2 = new THREE.Vector3();\nvar getPoint2 = function getPoint2(point3, camera, size) {\n  var widthHalf = size.width / 2;\n  var heightHalf = size.height / 2;\n  camera.updateMatrixWorld(false);\n  var vector = point3.project(camera);\n  vector.x = vector.x * widthHalf + widthHalf;\n  vector.y = -(vector.y * heightHalf) + heightHalf;\n  return vector;\n};\nvar getPoint3 = function getPoint3(point2, camera, size) {\n  var zValue = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n  var vector = tV0.set(point2.x / size.width * 2 - 1, -(point2.y / size.height) * 2 + 1, zValue);\n  vector.unproject(camera);\n  return vector;\n};\nvar calculateScaleFactor = function calculateScaleFactor(point3, radiusPx, camera, size) {\n  var point2 = getPoint2(tV2.copy(point3), camera, size);\n  var scale = 0;\n  for (var i = 0; i < 2; ++i) {\n    var point2off = tV1.copy(point2).setComponent(i, point2.getComponent(i) + radiusPx);\n    var point3off = getPoint3(point2off, camera, size, point2off.z);\n    scale = Math.max(scale, point3.distanceTo(point3off));\n  }\n  return scale;\n};\nvar mL0 = new THREE.Matrix4();\nvar mW0 = new THREE.Matrix4();\nvar mP = new THREE.Matrix4();\nvar mPInv = new THREE.Matrix4();\nvar mW = new THREE.Matrix4();\nvar mL = new THREE.Matrix4();\nvar mL0Inv = new THREE.Matrix4();\nvar mdL = new THREE.Matrix4();\nvar bb = new THREE.Box3();\nvar bbObj = new THREE.Box3();\nvar vCenter = new THREE.Vector3();\nvar vSize = new THREE.Vector3();\nvar vAnchorOffset = new THREE.Vector3();\nvar vPosition = new THREE.Vector3();\nvar xDir = new THREE.Vector3(1, 0, 0);\nvar yDir = new THREE.Vector3(0, 1, 0);\nvar zDir = new THREE.Vector3(0, 0, 1);\nvar PivotControls = /*#__PURE__*/React.forwardRef(function (_ref, fRef) {\n  var matrix = _ref.matrix,\n    _onDragStart = _ref.onDragStart,\n    _onDrag = _ref.onDrag,\n    _onDragEnd = _ref.onDragEnd,\n    _ref$autoTransform = _ref.autoTransform,\n    autoTransform = _ref$autoTransform === void 0 ? true : _ref$autoTransform,\n    anchor = _ref.anchor,\n    _ref$disableAxes = _ref.disableAxes,\n    disableAxes = _ref$disableAxes === void 0 ? false : _ref$disableAxes,\n    _ref$disableSliders = _ref.disableSliders,\n    disableSliders = _ref$disableSliders === void 0 ? false : _ref$disableSliders,\n    _ref$disableRotations = _ref.disableRotations,\n    disableRotations = _ref$disableRotations === void 0 ? false : _ref$disableRotations,\n    _ref$activeAxes = _ref.activeAxes,\n    activeAxes = _ref$activeAxes === void 0 ? [true, true, true] : _ref$activeAxes,\n    _ref$offset = _ref.offset,\n    offset = _ref$offset === void 0 ? [0, 0, 0] : _ref$offset,\n    _ref$rotation = _ref.rotation,\n    rotation = _ref$rotation === void 0 ? [0, 0, 0] : _ref$rotation,\n    _ref$scale = _ref.scale,\n    scale = _ref$scale === void 0 ? 1 : _ref$scale,\n    _ref$lineWidth = _ref.lineWidth,\n    lineWidth = _ref$lineWidth === void 0 ? 4 : _ref$lineWidth,\n    _ref$fixed = _ref.fixed,\n    fixed = _ref$fixed === void 0 ? false : _ref$fixed,\n    translationLimits = _ref.translationLimits,\n    rotationLimits = _ref.rotationLimits,\n    _ref$depthTest = _ref.depthTest,\n    depthTest = _ref$depthTest === void 0 ? true : _ref$depthTest,\n    _ref$axisColors = _ref.axisColors,\n    axisColors = _ref$axisColors === void 0 ? ['#ff2060', '#20df80', '#2080ff'] : _ref$axisColors,\n    _ref$hoveredColor = _ref.hoveredColor,\n    hoveredColor = _ref$hoveredColor === void 0 ? '#ffff40' : _ref$hoveredColor,\n    _ref$displayValues = _ref.displayValues,\n    displayValues = _ref$displayValues === void 0 ? true : _ref$displayValues,\n    annotationsClass = _ref.annotationsClass,\n    _ref$opacity = _ref.opacity,\n    opacity = _ref$opacity === void 0 ? 1 : _ref$opacity,\n    _ref$visible = _ref.visible,\n    visible = _ref$visible === void 0 ? true : _ref$visible,\n    userData = _ref.userData,\n    children = _ref.children;\n  var invalidate = useThree(function (state) {\n    return state.invalidate;\n  });\n  var parentRef = React.useRef(null);\n  var ref = React.useRef(null);\n  var gizmoRef = React.useRef(null);\n  var childrenRef = React.useRef(null);\n  var translation = React.useRef([0, 0, 0]);\n  React.useLayoutEffect(function () {\n    if (!anchor) return;\n    childrenRef.current.updateWorldMatrix(true, true);\n    mPInv.copy(childrenRef.current.matrixWorld).invert();\n    bb.makeEmpty();\n    childrenRef.current.traverse(function (obj) {\n      if (!obj.geometry) return;\n      if (!obj.geometry.boundingBox) obj.geometry.computeBoundingBox();\n      mL.copy(obj.matrixWorld).premultiply(mPInv);\n      bbObj.copy(obj.geometry.boundingBox);\n      bbObj.applyMatrix4(mL);\n      bb.union(bbObj);\n    });\n    vCenter.copy(bb.max).add(bb.min).multiplyScalar(0.5);\n    vSize.copy(bb.max).sub(bb.min).multiplyScalar(0.5);\n    vAnchorOffset.copy(vSize).multiply(_construct(THREE.Vector3, _toConsumableArray(anchor))).add(vCenter);\n    vPosition.set.apply(vPosition, _toConsumableArray(offset)).add(vAnchorOffset);\n    gizmoRef.current.position.copy(vPosition);\n    invalidate();\n  });\n  var config = React.useMemo(function () {\n    return {\n      onDragStart: function onDragStart(props) {\n        mL0.copy(ref.current.matrix);\n        mW0.copy(ref.current.matrixWorld);\n        _onDragStart && _onDragStart(props);\n        invalidate();\n      },\n      onDrag: function onDrag(mdW) {\n        mP.copy(parentRef.current.matrixWorld);\n        mPInv.copy(mP).invert(); // After applying the delta\n\n        mW.copy(mW0).premultiply(mdW);\n        mL.copy(mW).premultiply(mPInv);\n        mL0Inv.copy(mL0).invert();\n        mdL.copy(mL).multiply(mL0Inv);\n        if (autoTransform) ref.current.matrix.copy(mL);\n        _onDrag && _onDrag(mL, mdL, mW, mdW);\n        invalidate();\n      },\n      onDragEnd: function onDragEnd() {\n        if (_onDragEnd) _onDragEnd();\n        invalidate();\n      },\n      translation: translation,\n      translationLimits: translationLimits,\n      rotationLimits: rotationLimits,\n      axisColors: axisColors,\n      hoveredColor: hoveredColor,\n      opacity: opacity,\n      scale: scale,\n      lineWidth: lineWidth,\n      fixed: fixed,\n      displayValues: displayValues,\n      depthTest: depthTest,\n      userData: userData,\n      annotationsClass: annotationsClass\n    };\n  }, [_onDragStart, _onDrag, _onDragEnd, translation, translationLimits, rotationLimits, depthTest, scale, lineWidth, fixed].concat(_toConsumableArray(axisColors), [hoveredColor, opacity, displayValues, userData, autoTransform, annotationsClass]));\n  var vec = new THREE.Vector3();\n  useFrame(function (state) {\n    if (fixed) {\n      var sf = calculateScaleFactor(gizmoRef.current.getWorldPosition(vec), scale, state.camera, state.size);\n      if (gizmoRef.current) {\n        var _gizmoRef$current, _gizmoRef$current2, _gizmoRef$current3;\n        if (((_gizmoRef$current = gizmoRef.current) == null ? void 0 : _gizmoRef$current.scale.x) !== sf || ((_gizmoRef$current2 = gizmoRef.current) == null ? void 0 : _gizmoRef$current2.scale.y) !== sf || ((_gizmoRef$current3 = gizmoRef.current) == null ? void 0 : _gizmoRef$current3.scale.z) !== sf) {\n          gizmoRef.current.scale.setScalar(sf);\n          state.invalidate();\n        }\n      }\n    }\n  });\n  React.useImperativeHandle(fRef, function () {\n    return ref.current;\n  }, []);\n  return /*#__PURE__*/React.createElement(context.Provider, {\n    value: config\n  }, /*#__PURE__*/React.createElement(\"group\", {\n    ref: parentRef\n  }, /*#__PURE__*/React.createElement(\"group\", {\n    ref: ref,\n    matrix: matrix,\n    matrixAutoUpdate: false\n  }, /*#__PURE__*/React.createElement(\"group\", {\n    visible: visible,\n    ref: gizmoRef,\n    position: offset,\n    rotation: rotation\n  }, !disableAxes && activeAxes[0] && /*#__PURE__*/React.createElement(AxisArrow, {\n    axis: 0,\n    direction: xDir\n  }), !disableAxes && activeAxes[1] && /*#__PURE__*/React.createElement(AxisArrow, {\n    axis: 1,\n    direction: yDir\n  }), !disableAxes && activeAxes[2] && /*#__PURE__*/React.createElement(AxisArrow, {\n    axis: 2,\n    direction: zDir\n  }), !disableSliders && activeAxes[0] && activeAxes[1] && /*#__PURE__*/React.createElement(PlaneSlider, {\n    axis: 2,\n    dir1: xDir,\n    dir2: yDir\n  }), !disableSliders && activeAxes[0] && activeAxes[2] && /*#__PURE__*/React.createElement(PlaneSlider, {\n    axis: 1,\n    dir1: zDir,\n    dir2: xDir\n  }), !disableSliders && activeAxes[2] && activeAxes[1] && /*#__PURE__*/React.createElement(PlaneSlider, {\n    axis: 0,\n    dir1: yDir,\n    dir2: zDir\n  }), !disableRotations && activeAxes[0] && activeAxes[1] && /*#__PURE__*/React.createElement(AxisRotator, {\n    axis: 2,\n    dir1: xDir,\n    dir2: yDir\n  }), !disableRotations && activeAxes[0] && activeAxes[2] && /*#__PURE__*/React.createElement(AxisRotator, {\n    axis: 1,\n    dir1: zDir,\n    dir2: xDir\n  }), !disableRotations && activeAxes[2] && activeAxes[1] && /*#__PURE__*/React.createElement(AxisRotator, {\n    axis: 0,\n    dir1: yDir,\n    dir2: zDir\n  })), /*#__PURE__*/React.createElement(\"group\", {\n    ref: childrenRef\n  }, children))));\n});\nexport { PivotControls, calculateScaleFactor };","map":null,"metadata":{},"sourceType":"module"}