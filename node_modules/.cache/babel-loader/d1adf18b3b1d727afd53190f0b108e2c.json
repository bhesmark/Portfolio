{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\clent\\\\OneDrive\\\\Documents\\\\gsrlic\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _createForOfIteratorHelper from \"C:\\\\Users\\\\clent\\\\OneDrive\\\\Documents\\\\gsrlic\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"C:\\\\Users\\\\clent\\\\OneDrive\\\\Documents\\\\gsrlic\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\clent\\\\OneDrive\\\\Documents\\\\gsrlic\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar _Plugins_engine;\nexport var Plugins = /*#__PURE__*/function () {\n  function Plugins(engine) {\n    _classCallCheck(this, Plugins);\n    _Plugins_engine.set(this, void 0);\n    __classPrivateFieldSet(this, _Plugins_engine, engine, \"f\");\n    this.plugins = [];\n    this.interactorsInitializers = new Map();\n    this.moversInitializers = new Map();\n    this.updatersInitializers = new Map();\n    this.interactors = new Map();\n    this.movers = new Map();\n    this.updaters = new Map();\n    this.presets = new Map();\n    this.drawers = new Map();\n    this.pathGenerators = new Map();\n  }\n  _createClass(Plugins, [{\n    key: \"getPlugin\",\n    value: function getPlugin(plugin) {\n      return this.plugins.find(function (t) {\n        return t.id === plugin;\n      });\n    }\n  }, {\n    key: \"addPlugin\",\n    value: function addPlugin(plugin) {\n      if (!this.getPlugin(plugin.id)) {\n        this.plugins.push(plugin);\n      }\n    }\n  }, {\n    key: \"getAvailablePlugins\",\n    value: function getAvailablePlugins(container) {\n      var res = new Map();\n      var _iterator = _createForOfIteratorHelper(this.plugins),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var plugin = _step.value;\n          if (!plugin.needsPlugin(container.actualOptions)) {\n            continue;\n          }\n          res.set(plugin.id, plugin.getPlugin(container));\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return res;\n    }\n  }, {\n    key: \"loadOptions\",\n    value: function loadOptions(options, sourceOptions) {\n      var _iterator2 = _createForOfIteratorHelper(this.plugins),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var plugin = _step2.value;\n          plugin.loadOptions(options, sourceOptions);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  }, {\n    key: \"getPreset\",\n    value: function getPreset(preset) {\n      return this.presets.get(preset);\n    }\n  }, {\n    key: \"addPreset\",\n    value: function addPreset(presetKey, options) {\n      var override = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      if (override || !this.getPreset(presetKey)) {\n        this.presets.set(presetKey, options);\n      }\n    }\n  }, {\n    key: \"getShapeDrawer\",\n    value: function getShapeDrawer(type) {\n      return this.drawers.get(type);\n    }\n  }, {\n    key: \"addShapeDrawer\",\n    value: function addShapeDrawer(type, drawer) {\n      if (!this.getShapeDrawer(type)) {\n        this.drawers.set(type, drawer);\n      }\n    }\n  }, {\n    key: \"getSupportedShapes\",\n    value: function getSupportedShapes() {\n      return this.drawers.keys();\n    }\n  }, {\n    key: \"getPathGenerator\",\n    value: function getPathGenerator(type) {\n      return this.pathGenerators.get(type);\n    }\n  }, {\n    key: \"addPathGenerator\",\n    value: function addPathGenerator(type, pathGenerator) {\n      if (!this.getPathGenerator(type)) {\n        this.pathGenerators.set(type, pathGenerator);\n      }\n    }\n  }, {\n    key: \"getInteractors\",\n    value: function getInteractors(container) {\n      var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var res = this.interactors.get(container);\n      if (!res || force) {\n        res = _toConsumableArray(this.interactorsInitializers.values()).map(function (t) {\n          return t(container);\n        });\n        this.interactors.set(container, res);\n      }\n      return res;\n    }\n  }, {\n    key: \"addInteractor\",\n    value: function addInteractor(name, initInteractor) {\n      this.interactorsInitializers.set(name, initInteractor);\n    }\n  }, {\n    key: \"getUpdaters\",\n    value: function getUpdaters(container) {\n      var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var res = this.updaters.get(container);\n      if (!res || force) {\n        res = _toConsumableArray(this.updatersInitializers.values()).map(function (t) {\n          return t(container);\n        });\n        this.updaters.set(container, res);\n      }\n      return res;\n    }\n  }, {\n    key: \"addParticleUpdater\",\n    value: function addParticleUpdater(name, initUpdater) {\n      this.updatersInitializers.set(name, initUpdater);\n    }\n  }, {\n    key: \"getMovers\",\n    value: function getMovers(container) {\n      var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var res = this.movers.get(container);\n      if (!res || force) {\n        res = _toConsumableArray(this.moversInitializers.values()).map(function (t) {\n          return t(container);\n        });\n        this.movers.set(container, res);\n      }\n      return res;\n    }\n  }, {\n    key: \"addParticleMover\",\n    value: function addParticleMover(name, initMover) {\n      this.moversInitializers.set(name, initMover);\n    }\n  }]);\n  return Plugins;\n}();\n_Plugins_engine = new WeakMap();","map":null,"metadata":{},"sourceType":"module"}