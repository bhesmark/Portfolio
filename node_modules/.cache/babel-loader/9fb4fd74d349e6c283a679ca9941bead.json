{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/baic/Documents/programm/gsrlic/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"/Users/baic/Documents/programm/gsrlic/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/baic/Documents/programm/gsrlic/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/baic/Documents/programm/gsrlic/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/baic/Documents/programm/gsrlic/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport Node from './Node.js';\nvar CodeNode = /*#__PURE__*/function (_Node) {\n  _inherits(CodeNode, _Node);\n  var _super = _createSuper(CodeNode);\n  function CodeNode() {\n    var _this;\n    var code = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    var nodeType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'code';\n    _classCallCheck(this, CodeNode);\n    _this = _super.call(this, nodeType);\n    _this.code = code;\n    _this._includes = [];\n    return _this;\n  }\n  _createClass(CodeNode, [{\n    key: \"setIncludes\",\n    value: function setIncludes(includes) {\n      this._includes = includes;\n      return this;\n    }\n  }, {\n    key: \"getIncludes\",\n    value: function getIncludes() {\n      return this._includes;\n    }\n  }, {\n    key: \"generate\",\n    value: function generate(builder) {\n      var includes = this.getIncludes(builder);\n      var _iterator = _createForOfIteratorHelper(includes),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var include = _step.value;\n          include.build(builder);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      var nodeCode = builder.getCodeFromNode(this, this.getNodeType(builder));\n      nodeCode.code = this.code;\n      return nodeCode.code;\n    }\n  }]);\n  return CodeNode;\n}(Node);\nCodeNode.prototype.isCodeNode = true;\nexport default CodeNode;","map":null,"metadata":{},"sourceType":"module"}