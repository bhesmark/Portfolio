{"ast":null,"code":"import _construct from \"/Users/baic/Documents/programm/gsrlic/node_modules/@babel/runtime/helpers/esm/construct\";\nimport _toConsumableArray from \"/Users/baic/Documents/programm/gsrlic/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectWithoutProperties from \"/Users/baic/Documents/programm/gsrlic/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"points\", \"closed\", \"curveType\", \"tension\", \"segments\", \"vertexColors\"];\nimport _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { Vector3, CatmullRomCurve3, Color } from 'three';\nimport { Line } from './Line.js';\nvar CatmullRomLine = /*#__PURE__*/React.forwardRef(function CatmullRomLine(_ref, ref) {\n  var points = _ref.points,\n    _ref$closed = _ref.closed,\n    closed = _ref$closed === void 0 ? false : _ref$closed,\n    _ref$curveType = _ref.curveType,\n    curveType = _ref$curveType === void 0 ? 'centripetal' : _ref$curveType,\n    _ref$tension = _ref.tension,\n    tension = _ref$tension === void 0 ? 0.5 : _ref$tension,\n    _ref$segments = _ref.segments,\n    segments = _ref$segments === void 0 ? 20 : _ref$segments,\n    vertexColors = _ref.vertexColors,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var curve = React.useMemo(function () {\n    var mappedPoints = points.map(function (pt) {\n      return pt instanceof Vector3 ? pt : _construct(Vector3, _toConsumableArray(pt));\n    });\n    return new CatmullRomCurve3(mappedPoints, closed, curveType, tension);\n  }, [points, closed, curveType, tension]);\n  var segmentedPoints = React.useMemo(function () {\n    return curve.getPoints(segments);\n  }, [curve, segments]);\n  var interpolatedVertexColors = React.useMemo(function () {\n    if (!vertexColors || vertexColors.length < 2) return undefined;\n    if (vertexColors.length === segments + 1) return vertexColors;\n    var mappedColors = vertexColors.map(function (color) {\n      return color instanceof Color ? color : _construct(Color, _toConsumableArray(color));\n    });\n    if (closed) mappedColors.push(mappedColors[0].clone());\n    var iColors = [mappedColors[0]];\n    var divisions = segments / (mappedColors.length - 1);\n    for (var i = 1; i < segments; i++) {\n      var alpha = i % divisions / divisions;\n      var colorIndex = Math.floor(i / divisions);\n      iColors.push(mappedColors[colorIndex].clone().lerp(mappedColors[colorIndex + 1], alpha));\n    }\n    iColors.push(mappedColors[mappedColors.length - 1]);\n    return iColors;\n  }, [vertexColors, segments]);\n  return /*#__PURE__*/React.createElement(Line, _extends({\n    ref: ref,\n    points: segmentedPoints,\n    vertexColors: interpolatedVertexColors\n  }, rest));\n});\nexport { CatmullRomLine };","map":null,"metadata":{},"sourceType":"module"}