{"ast":null,"code":"import * as React from 'react';\nimport { useThree, useFrame } from '@react-three/fiber';\nimport { AsciiEffect } from 'three-stdlib';\nfunction AsciiRenderer(_ref) {\n  var _ref$renderIndex = _ref.renderIndex,\n    renderIndex = _ref$renderIndex === void 0 ? 1 : _ref$renderIndex,\n    _ref$bgColor = _ref.bgColor,\n    bgColor = _ref$bgColor === void 0 ? 'black' : _ref$bgColor,\n    _ref$fgColor = _ref.fgColor,\n    fgColor = _ref$fgColor === void 0 ? 'white' : _ref$fgColor,\n    _ref$characters = _ref.characters,\n    characters = _ref$characters === void 0 ? ' .:-+*=%@#' : _ref$characters,\n    _ref$invert = _ref.invert,\n    invert = _ref$invert === void 0 ? true : _ref$invert,\n    _ref$color = _ref.color,\n    color = _ref$color === void 0 ? false : _ref$color,\n    _ref$resolution = _ref.resolution,\n    resolution = _ref$resolution === void 0 ? 0.15 : _ref$resolution;\n  // Reactive state\n  var _useThree = useThree(),\n    size = _useThree.size,\n    gl = _useThree.gl,\n    scene = _useThree.scene,\n    camera = _useThree.camera; // Create effect\n\n  var effect = React.useMemo(function () {\n    var effect = new AsciiEffect(gl, characters, {\n      invert: invert,\n      color: color,\n      resolution: resolution\n    });\n    effect.domElement.style.position = 'absolute';\n    effect.domElement.style.top = '0px';\n    effect.domElement.style.left = '0px';\n    effect.domElement.style.pointerEvents = 'none';\n    return effect;\n  }, [characters, invert, color, resolution]); // Styling\n\n  React.useLayoutEffect(function () {\n    effect.domElement.style.color = fgColor;\n    effect.domElement.style.backgroundColor = bgColor;\n  }, [fgColor, bgColor]); // Append on mount, remove on unmount\n\n  React.useEffect(function () {\n    gl.domElement.style.opacity = '0';\n    gl.domElement.parentNode.appendChild(effect.domElement);\n    return function () {\n      gl.domElement.style.opacity = '1';\n      gl.domElement.parentNode.removeChild(effect.domElement);\n    };\n  }, [effect]); // Set size\n\n  React.useEffect(function () {\n    effect.setSize(size.width, size.height);\n  }, [effect, size]); // Take over render-loop (that is what the index is for)\n\n  useFrame(function (state) {\n    effect.render(scene, camera);\n  }, renderIndex); // This component returns nothing, it is a purely logical\n}\n\nexport { AsciiRenderer };","map":null,"metadata":{},"sourceType":"module"}