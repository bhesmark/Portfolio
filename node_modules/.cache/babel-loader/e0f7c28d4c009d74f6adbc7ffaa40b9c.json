{"ast":null,"code":"import _slicedToArray from \"/Users/baic/Documents/programm/gsrlic/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/Users/baic/Documents/programm/gsrlic/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"points\", \"color\", \"vertexColors\", \"linewidth\", \"lineWidth\", \"dashed\"];\nimport _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { Vector3, Vector2, Color } from 'three';\nimport { useThree } from '@react-three/fiber';\nimport { Line2, LineMaterial, LineGeometry } from 'three-stdlib';\nvar Line = /*#__PURE__*/React.forwardRef(function Line(_ref, ref) {\n  var points = _ref.points,\n    _ref$color = _ref.color,\n    color = _ref$color === void 0 ? 'black' : _ref$color,\n    vertexColors = _ref.vertexColors,\n    linewidth = _ref.linewidth,\n    lineWidth = _ref.lineWidth,\n    dashed = _ref.dashed,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var size = useThree(function (state) {\n    return state.size;\n  });\n  var _React$useState = React.useState(function () {\n      return new Line2();\n    }),\n    _React$useState2 = _slicedToArray(_React$useState, 1),\n    line2 = _React$useState2[0];\n  var _React$useState3 = React.useState(function () {\n      return new LineMaterial();\n    }),\n    _React$useState4 = _slicedToArray(_React$useState3, 1),\n    lineMaterial = _React$useState4[0];\n  var lineGeom = React.useMemo(function () {\n    var geom = new LineGeometry();\n    var pValues = points.map(function (p) {\n      var isArray = Array.isArray(p);\n      return p instanceof Vector3 ? [p.x, p.y, p.z] : p instanceof Vector2 ? [p.x, p.y, 0] : isArray && p.length === 3 ? [p[0], p[1], p[2]] : isArray && p.length === 2 ? [p[0], p[1], 0] : p;\n    });\n    geom.setPositions(pValues.flat());\n    if (vertexColors) {\n      var cValues = vertexColors.map(function (c) {\n        return c instanceof Color ? c.toArray() : c;\n      });\n      geom.setColors(cValues.flat());\n    }\n    return geom;\n  }, [points, vertexColors]);\n  React.useLayoutEffect(function () {\n    line2.computeLineDistances();\n  }, [points, line2]);\n  React.useLayoutEffect(function () {\n    if (dashed) {\n      lineMaterial.defines.USE_DASH = '';\n    } else {\n      // Setting lineMaterial.defines.USE_DASH to undefined is apparently not sufficient.\n      delete lineMaterial.defines.USE_DASH;\n    }\n    lineMaterial.needsUpdate = true;\n  }, [dashed, lineMaterial]);\n  React.useEffect(function () {\n    return function () {\n      return lineGeom.dispose();\n    };\n  }, [lineGeom]);\n  return /*#__PURE__*/React.createElement(\"primitive\", _extends({\n    object: line2,\n    ref: ref\n  }, rest), /*#__PURE__*/React.createElement(\"primitive\", {\n    object: lineGeom,\n    attach: \"geometry\"\n  }), /*#__PURE__*/React.createElement(\"primitive\", _extends({\n    object: lineMaterial,\n    attach: \"material\",\n    color: color,\n    vertexColors: Boolean(vertexColors),\n    resolution: [size.width, size.height],\n    linewidth: linewidth !== null && linewidth !== void 0 ? linewidth : lineWidth,\n    dashed: dashed\n  }, rest)));\n});\nexport { Line };","map":null,"metadata":{},"sourceType":"module"}