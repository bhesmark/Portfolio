{"ast":null,"code":"import _slicedToArray from \"/Users/baic/Documents/programm/gsrlic/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/Users/baic/Documents/programm/gsrlic/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"children\", \"multisamping\", \"renderIndex\", \"disableRender\", \"disableGamma\", \"disableRenderPass\", \"depthBuffer\", \"stencilBuffer\", \"anisotropy\", \"encoding\", \"type\"];\nimport _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { WebGLRenderTarget, HalfFloatType, RGBAFormat } from 'three';\nimport { extend, useThree, useFrame } from '@react-three/fiber';\nimport { EffectComposer, RenderPass, ShaderPass, GammaCorrectionShader } from 'three-stdlib';\nimport mergeRefs from 'react-merge-refs';\nvar isWebGL2Available = function isWebGL2Available() {\n  try {\n    var canvas = document.createElement('canvas');\n    return !!(window.WebGL2RenderingContext && canvas.getContext('webgl2'));\n  } catch (e) {\n    return false;\n  }\n};\nvar Effects = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var children = _ref.children,\n    _ref$multisamping = _ref.multisamping,\n    multisamping = _ref$multisamping === void 0 ? 8 : _ref$multisamping,\n    _ref$renderIndex = _ref.renderIndex,\n    renderIndex = _ref$renderIndex === void 0 ? 1 : _ref$renderIndex,\n    disableRender = _ref.disableRender,\n    disableGamma = _ref.disableGamma,\n    disableRenderPass = _ref.disableRenderPass,\n    _ref$depthBuffer = _ref.depthBuffer,\n    depthBuffer = _ref$depthBuffer === void 0 ? true : _ref$depthBuffer,\n    _ref$stencilBuffer = _ref.stencilBuffer,\n    stencilBuffer = _ref$stencilBuffer === void 0 ? false : _ref$stencilBuffer,\n    _ref$anisotropy = _ref.anisotropy,\n    anisotropy = _ref$anisotropy === void 0 ? 1 : _ref$anisotropy,\n    encoding = _ref.encoding,\n    type = _ref.type,\n    props = _objectWithoutProperties(_ref, _excluded);\n  React.useMemo(function () {\n    return extend({\n      EffectComposer: EffectComposer,\n      RenderPass: RenderPass,\n      ShaderPass: ShaderPass\n    });\n  }, []);\n  var composer = React.useRef();\n  var _useThree = useThree(),\n    scene = _useThree.scene,\n    camera = _useThree.camera,\n    gl = _useThree.gl,\n    size = _useThree.size,\n    viewport = _useThree.viewport;\n  var _React$useState = React.useState(function () {\n      var t = new WebGLRenderTarget(size.width, size.height, {\n        type: type || HalfFloatType,\n        format: RGBAFormat,\n        encoding: encoding || gl.outputEncoding,\n        depthBuffer: depthBuffer,\n        stencilBuffer: stencilBuffer,\n        anisotropy: anisotropy\n      });\n      t.samples = multisamping;\n      return t;\n    }),\n    _React$useState2 = _slicedToArray(_React$useState, 1),\n    target = _React$useState2[0];\n  React.useEffect(function () {\n    var _composer$current, _composer$current2;\n    (_composer$current = composer.current) == null ? void 0 : _composer$current.setSize(size.width, size.height);\n    (_composer$current2 = composer.current) == null ? void 0 : _composer$current2.setPixelRatio(viewport.dpr);\n  }, [gl, size, viewport.dpr]);\n  useFrame(function () {\n    var _composer$current3;\n    if (!disableRender) (_composer$current3 = composer.current) == null ? void 0 : _composer$current3.render();\n  }, renderIndex);\n  var passes = [];\n  if (!disableRenderPass) passes.push( /*#__PURE__*/React.createElement(\"renderPass\", {\n    key: \"renderpass\",\n    attach: \"passes-\".concat(passes.length),\n    args: [scene, camera]\n  }));\n  if (!disableGamma) passes.push( /*#__PURE__*/React.createElement(\"shaderPass\", {\n    attach: \"passes-\".concat(passes.length),\n    key: \"gammapass\",\n    args: [GammaCorrectionShader]\n  }));\n  React.Children.forEach(children, function (el) {\n    el && passes.push( /*#__PURE__*/React.cloneElement(el, {\n      key: passes.length,\n      attach: \"passes-\".concat(passes.length)\n    }));\n  });\n  return /*#__PURE__*/React.createElement(\"effectComposer\", _extends({\n    ref: mergeRefs([ref, composer]),\n    args: [gl, target]\n  }, props), passes);\n});\nexport { Effects, isWebGL2Available };","map":null,"metadata":{},"sourceType":"module"}