{"ast":null,"code":"import _objectWithoutProperties from \"/Users/baic/Documents/programm/gsrlic/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _slicedToArray from \"/Users/baic/Documents/programm/gsrlic/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _excluded = [\"distance\", \"alphaTest\", \"map\", \"shader\", \"width\", \"height\", \"scale\", \"children\"],\n  _excluded2 = [\"distance\", \"alphaTest\", \"map\", \"width\", \"height\", \"scale\", \"children\"],\n  _excluded3 = [\"opacity\", \"radiusTop\", \"radiusBottom\", \"depthBuffer\", \"color\", \"distance\", \"angle\", \"attenuation\", \"anglePower\", \"volumetric\", \"debug\", \"children\"];\nimport _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { Vector3, CylinderGeometry, Matrix4, WebGLRenderTarget, RGBAFormat, LinearEncoding, ShaderMaterial, DoubleSide, RepeatWrapping } from 'three';\nimport { useThree, useFrame } from '@react-three/fiber';\nimport { FullScreenQuad } from 'three-stdlib';\nimport mergeRefs from 'react-merge-refs';\nimport { SpotLightMaterial } from '../materials/SpotLightMaterial.js';\nimport SpotlightShadowShader from '../helpers/glsl/DefaultSpotlightShadowShadows.glsl.js';\nvar isSpotLight = function isSpotLight(child) {\n  return child == null ? void 0 : child.isSpotLight;\n};\nfunction VolumetricMesh(_ref) {\n  var _ref$opacity = _ref.opacity,\n    opacity = _ref$opacity === void 0 ? 1 : _ref$opacity,\n    radiusTop = _ref.radiusTop,\n    radiusBottom = _ref.radiusBottom,\n    depthBuffer = _ref.depthBuffer,\n    _ref$color = _ref.color,\n    color = _ref$color === void 0 ? 'white' : _ref$color,\n    _ref$distance = _ref.distance,\n    distance = _ref$distance === void 0 ? 5 : _ref$distance,\n    _ref$angle = _ref.angle,\n    angle = _ref$angle === void 0 ? 0.15 : _ref$angle,\n    _ref$attenuation = _ref.attenuation,\n    attenuation = _ref$attenuation === void 0 ? 5 : _ref$attenuation,\n    _ref$anglePower = _ref.anglePower,\n    anglePower = _ref$anglePower === void 0 ? 5 : _ref$anglePower;\n  var mesh = React.useRef(null);\n  var size = useThree(function (state) {\n    return state.size;\n  });\n  var camera = useThree(function (state) {\n    return state.camera;\n  });\n  var dpr = useThree(function (state) {\n    return state.viewport.dpr;\n  });\n  var _React$useState = React.useState(function () {\n      return new SpotLightMaterial();\n    }),\n    _React$useState2 = _slicedToArray(_React$useState, 1),\n    material = _React$useState2[0];\n  var _React$useState3 = React.useState(function () {\n      return new Vector3();\n    }),\n    _React$useState4 = _slicedToArray(_React$useState3, 1),\n    vec = _React$useState4[0];\n  radiusTop = radiusTop === undefined ? 0.1 : radiusTop;\n  radiusBottom = radiusBottom === undefined ? angle * 7 : radiusBottom;\n  useFrame(function () {\n    material.uniforms.spotPosition.value.copy(mesh.current.getWorldPosition(vec));\n    mesh.current.lookAt(mesh.current.parent.target.getWorldPosition(vec));\n  });\n  var geom = React.useMemo(function () {\n    var geometry = new CylinderGeometry(radiusTop, radiusBottom, distance, 128, 64, true);\n    geometry.applyMatrix4(new Matrix4().makeTranslation(0, -distance / 2, 0));\n    geometry.applyMatrix4(new Matrix4().makeRotationX(-Math.PI / 2));\n    return geometry;\n  }, [distance, radiusTop, radiusBottom]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"mesh\", {\n    ref: mesh,\n    geometry: geom,\n    raycast: function raycast() {\n      return null;\n    }\n  }, /*#__PURE__*/React.createElement(\"primitive\", {\n    object: material,\n    attach: \"material\",\n    \"uniforms-opacity-value\": opacity,\n    \"uniforms-lightColor-value\": color,\n    \"uniforms-attenuation-value\": attenuation,\n    \"uniforms-anglePower-value\": anglePower,\n    \"uniforms-depth-value\": depthBuffer,\n    \"uniforms-cameraNear-value\": camera.near,\n    \"uniforms-cameraFar-value\": camera.far,\n    \"uniforms-resolution-value\": depthBuffer ? [size.width * dpr, size.height * dpr] : [0, 0]\n  })));\n}\nfunction useCommon(spotlight, mesh, width, height, distance) {\n  var _React$useState5 = React.useState(function () {\n      return [new Vector3(), new Vector3()];\n    }),\n    _React$useState6 = _slicedToArray(_React$useState5, 1),\n    _React$useState6$ = _slicedToArray(_React$useState6[0], 2),\n    pos = _React$useState6$[0],\n    dir = _React$useState6$[1];\n  React.useLayoutEffect(function () {\n    if (isSpotLight(spotlight.current)) {\n      console.log(spotlight.current);\n      spotlight.current.shadow.mapSize.set(width, height);\n      spotlight.current.shadow.needsUpdate = true;\n    } else {\n      throw new Error('SpotlightShadow must be a child of a SpotLight');\n    }\n  }, [spotlight, width, height]);\n  useFrame(function () {\n    if (!spotlight.current) return;\n    var A = spotlight.current.position;\n    var B = spotlight.current.target.position;\n    dir.copy(B).sub(A);\n    var len = dir.length();\n    dir.normalize().multiplyScalar(len * distance);\n    pos.copy(A).add(dir);\n    mesh.current.position.copy(pos);\n    mesh.current.lookAt(spotlight.current.target.position);\n  });\n}\nfunction SpotlightShadowWithShader(_ref2) {\n  var _ref2$distance = _ref2.distance,\n    distance = _ref2$distance === void 0 ? 0.4 : _ref2$distance,\n    _ref2$alphaTest = _ref2.alphaTest,\n    alphaTest = _ref2$alphaTest === void 0 ? 0.5 : _ref2$alphaTest,\n    map = _ref2.map,\n    _ref2$shader = _ref2.shader,\n    shader = _ref2$shader === void 0 ? SpotlightShadowShader : _ref2$shader,\n    _ref2$width = _ref2.width,\n    width = _ref2$width === void 0 ? 512 : _ref2$width,\n    _ref2$height = _ref2.height,\n    height = _ref2$height === void 0 ? 512 : _ref2$height,\n    _ref2$scale = _ref2.scale,\n    scale = _ref2$scale === void 0 ? 1 : _ref2$scale,\n    children = _ref2.children,\n    rest = _objectWithoutProperties(_ref2, _excluded);\n  var mesh = React.useRef(null);\n  var spotlight = rest.spotlightRef;\n  var debug = rest.debug;\n  useCommon(spotlight, mesh, width, height, distance);\n  var renderTarget = React.useMemo(function () {\n    return new WebGLRenderTarget(width, height, {\n      format: RGBAFormat,\n      encoding: LinearEncoding,\n      stencilBuffer: false // depthTexture: null!\n    });\n  }, [width, height]);\n  var uniforms = React.useRef({\n    uShadowMap: {\n      value: map\n    },\n    uTime: {\n      value: 0\n    }\n  });\n  React.useEffect(function () {\n    return void (uniforms.current.uShadowMap.value = map);\n  }, [map]);\n  var fsQuad = React.useMemo(function () {\n    return new FullScreenQuad(new ShaderMaterial({\n      uniforms: uniforms.current,\n      vertexShader: /* glsl */\"\\n          varying vec2 vUv;\\n\\n          void main() {\\n            vUv = uv;\\n            gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n          }\\n          \",\n      fragmentShader: shader\n    }));\n  }, [shader]);\n  React.useEffect(function () {\n    return function () {\n      fsQuad.material.dispose();\n      fsQuad.dispose();\n    };\n  }, [fsQuad]);\n  React.useEffect(function () {\n    return function () {\n      return renderTarget.dispose();\n    };\n  }, [renderTarget]);\n  useFrame(function (_ref3, dt) {\n    var gl = _ref3.gl;\n    uniforms.current.uTime.value += dt;\n    gl.setRenderTarget(renderTarget);\n    fsQuad.render(gl);\n    gl.setRenderTarget(null);\n  });\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"mesh\", {\n    ref: mesh,\n    scale: scale,\n    castShadow: true\n  }, /*#__PURE__*/React.createElement(\"planeGeometry\", null), /*#__PURE__*/React.createElement(\"meshBasicMaterial\", {\n    transparent: true,\n    side: DoubleSide,\n    alphaTest: alphaTest,\n    alphaMap: renderTarget.texture,\n    \"alphaMap-wrapS\": RepeatWrapping,\n    \"alphaMap-wrapT\": RepeatWrapping,\n    opacity: debug ? 1 : 0\n  }, children)));\n}\nfunction SpotlightShadowWithoutShader(_ref4) {\n  var _ref4$distance = _ref4.distance,\n    distance = _ref4$distance === void 0 ? 0.4 : _ref4$distance,\n    _ref4$alphaTest = _ref4.alphaTest,\n    alphaTest = _ref4$alphaTest === void 0 ? 0.5 : _ref4$alphaTest,\n    map = _ref4.map,\n    _ref4$width = _ref4.width,\n    width = _ref4$width === void 0 ? 512 : _ref4$width,\n    _ref4$height = _ref4.height,\n    height = _ref4$height === void 0 ? 512 : _ref4$height,\n    scale = _ref4.scale,\n    children = _ref4.children,\n    rest = _objectWithoutProperties(_ref4, _excluded2);\n  var mesh = React.useRef(null);\n  var spotlight = rest.spotlightRef;\n  var debug = rest.debug;\n  useCommon(spotlight, mesh, width, height, distance);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"mesh\", {\n    ref: mesh,\n    scale: scale,\n    castShadow: true\n  }, /*#__PURE__*/React.createElement(\"planeGeometry\", null), /*#__PURE__*/React.createElement(\"meshBasicMaterial\", {\n    transparent: true,\n    side: DoubleSide,\n    alphaTest: alphaTest,\n    alphaMap: map,\n    \"alphaMap-wrapS\": RepeatWrapping,\n    \"alphaMap-wrapT\": RepeatWrapping,\n    opacity: debug ? 1 : 0\n  }, children)));\n}\nfunction SpotLightShadow(props) {\n  if (props.shader) return /*#__PURE__*/React.createElement(SpotlightShadowWithShader, props);\n  return /*#__PURE__*/React.createElement(SpotlightShadowWithoutShader, props);\n}\nvar SpotLight = /*#__PURE__*/React.forwardRef(function (_ref5, ref) {\n  var _ref5$opacity = _ref5.opacity,\n    opacity = _ref5$opacity === void 0 ? 1 : _ref5$opacity,\n    radiusTop = _ref5.radiusTop,\n    radiusBottom = _ref5.radiusBottom,\n    depthBuffer = _ref5.depthBuffer,\n    _ref5$color = _ref5.color,\n    color = _ref5$color === void 0 ? 'white' : _ref5$color,\n    _ref5$distance = _ref5.distance,\n    distance = _ref5$distance === void 0 ? 5 : _ref5$distance,\n    _ref5$angle = _ref5.angle,\n    angle = _ref5$angle === void 0 ? 0.15 : _ref5$angle,\n    _ref5$attenuation = _ref5.attenuation,\n    attenuation = _ref5$attenuation === void 0 ? 5 : _ref5$attenuation,\n    _ref5$anglePower = _ref5.anglePower,\n    anglePower = _ref5$anglePower === void 0 ? 5 : _ref5$anglePower,\n    _ref5$volumetric = _ref5.volumetric,\n    volumetric = _ref5$volumetric === void 0 ? true : _ref5$volumetric,\n    _ref5$debug = _ref5.debug,\n    debug = _ref5$debug === void 0 ? false : _ref5$debug,\n    children = _ref5.children,\n    props = _objectWithoutProperties(_ref5, _excluded3);\n  var spotlight = React.useRef(null);\n  return /*#__PURE__*/React.createElement(\"group\", null, debug && spotlight.current && /*#__PURE__*/React.createElement(\"spotLightHelper\", {\n    args: [spotlight.current]\n  }), /*#__PURE__*/React.createElement(\"spotLight\", _extends({\n    ref: mergeRefs([ref, spotlight]),\n    angle: angle,\n    color: color,\n    distance: distance,\n    castShadow: true\n  }, props), volumetric && /*#__PURE__*/React.createElement(VolumetricMesh, {\n    debug: debug,\n    opacity: opacity,\n    radiusTop: radiusTop,\n    radiusBottom: radiusBottom,\n    depthBuffer: depthBuffer,\n    color: color,\n    distance: distance,\n    angle: angle,\n    attenuation: attenuation,\n    anglePower: anglePower\n  })), children && /*#__PURE__*/React.cloneElement(children, {\n    spotlightRef: spotlight,\n    debug: debug\n  }));\n});\nexport { SpotLight, SpotLightShadow };","map":null,"metadata":{},"sourceType":"module"}