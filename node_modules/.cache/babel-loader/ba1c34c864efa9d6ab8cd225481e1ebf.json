{"ast":null,"code":"import _objectWithoutProperties from \"/Users/baic/Documents/programm/gsrlic/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"children\", \"domElement\", \"onChange\", \"onMouseDown\", \"onMouseUp\", \"onObjectChange\", \"object\", \"makeDefault\"],\n  _excluded2 = [\"camera\"];\nimport _extends from '@babel/runtime/helpers/esm/extends';\nimport { useThree } from '@react-three/fiber';\nimport omit from 'lodash.omit';\nimport pick from 'lodash.pick';\nimport * as React from 'react';\nimport * as THREE from 'three';\nimport { TransformControls as TransformControls$1 } from 'three-stdlib';\nvar TransformControls = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var children = _ref.children,\n    domElement = _ref.domElement,\n    onChange = _ref.onChange,\n    onMouseDown = _ref.onMouseDown,\n    onMouseUp = _ref.onMouseUp,\n    onObjectChange = _ref.onObjectChange,\n    object = _ref.object,\n    makeDefault = _ref.makeDefault,\n    props = _objectWithoutProperties(_ref, _excluded);\n  var transformOnlyPropNames = ['enabled', 'axis', 'mode', 'translationSnap', 'rotationSnap', 'scaleSnap', 'space', 'size', 'showX', 'showY', 'showZ'];\n  var camera = props.camera,\n    rest = _objectWithoutProperties(props, _excluded2);\n  var transformProps = pick(rest, transformOnlyPropNames);\n  var objectProps = omit(rest, transformOnlyPropNames); // @ts-expect-error new in @react-three/fiber@7.0.5\n\n  var defaultControls = useThree(function (state) {\n    return state.controls;\n  });\n  var gl = useThree(function (state) {\n    return state.gl;\n  });\n  var events = useThree(function (state) {\n    return state.events;\n  });\n  var defaultCamera = useThree(function (state) {\n    return state.camera;\n  });\n  var invalidate = useThree(function (state) {\n    return state.invalidate;\n  });\n  var get = useThree(function (state) {\n    return state.get;\n  });\n  var set = useThree(function (state) {\n    return state.set;\n  });\n  var explCamera = camera || defaultCamera;\n  var explDomElement = domElement || events.connected || gl.domElement;\n  var controls = React.useMemo(function () {\n    return new TransformControls$1(explCamera, explDomElement);\n  }, [explCamera, explDomElement]);\n  var group = React.useRef();\n  React.useLayoutEffect(function () {\n    if (object) {\n      controls.attach(object instanceof THREE.Object3D ? object : object.current);\n    } else if (group.current instanceof THREE.Object3D) {\n      controls.attach(group.current);\n    }\n    return function () {\n      return void controls.detach();\n    };\n  }, [object, children, controls]);\n  React.useEffect(function () {\n    if (defaultControls) {\n      var callback = function callback(event) {\n        return defaultControls.enabled = !event.value;\n      };\n      controls.addEventListener('dragging-changed', callback);\n      return function () {\n        return controls.removeEventListener('dragging-changed', callback);\n      };\n    }\n  }, [controls, defaultControls]);\n  var onChangeRef = React.useRef();\n  var onMouseDownRef = React.useRef();\n  var onMouseUpRef = React.useRef();\n  var onObjectChangeRef = React.useRef();\n  React.useLayoutEffect(function () {\n    return void (onChangeRef.current = onChange);\n  }, [onChange]);\n  React.useLayoutEffect(function () {\n    return void (onMouseDownRef.current = onMouseDown);\n  }, [onMouseDown]);\n  React.useLayoutEffect(function () {\n    return void (onMouseUpRef.current = onMouseUp);\n  }, [onMouseUp]);\n  React.useLayoutEffect(function () {\n    return void (onObjectChangeRef.current = onObjectChange);\n  }, [onObjectChange]);\n  React.useEffect(function () {\n    var onChange = function onChange(e) {\n      invalidate();\n      onChangeRef.current == null ? void 0 : onChangeRef.current(e);\n    };\n    var onMouseDown = function onMouseDown(e) {\n      return onMouseDownRef.current == null ? void 0 : onMouseDownRef.current(e);\n    };\n    var onMouseUp = function onMouseUp(e) {\n      return onMouseUpRef.current == null ? void 0 : onMouseUpRef.current(e);\n    };\n    var onObjectChange = function onObjectChange(e) {\n      return onObjectChangeRef.current == null ? void 0 : onObjectChangeRef.current(e);\n    };\n    controls.addEventListener('change', onChange);\n    controls.addEventListener('mouseDown', onMouseDown);\n    controls.addEventListener('mouseUp', onMouseUp);\n    controls.addEventListener('objectChange', onObjectChange);\n    return function () {\n      controls.removeEventListener('change', onChange);\n      controls.removeEventListener('mouseDown', onMouseDown);\n      controls.removeEventListener('mouseUp', onMouseUp);\n      controls.removeEventListener('objectChange', onObjectChange);\n    };\n  }, [invalidate, controls]);\n  React.useEffect(function () {\n    if (makeDefault) {\n      var old = get().controls;\n      set({\n        controls: controls\n      });\n      return function () {\n        return set({\n          controls: old\n        });\n      };\n    }\n  }, [makeDefault, controls]);\n  return controls ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"primitive\", _extends({\n    ref: ref,\n    object: controls\n  }, transformProps)), /*#__PURE__*/React.createElement(\"group\", _extends({\n    ref: group\n  }, objectProps), children)) : null;\n});\nexport { TransformControls };","map":null,"metadata":{},"sourceType":"module"}