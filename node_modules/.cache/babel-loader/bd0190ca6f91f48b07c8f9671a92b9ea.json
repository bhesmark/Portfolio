{"ast":null,"code":"import _slicedToArray from \"/Users/baic/Documents/programm/gsrlic/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/Users/baic/Documents/programm/gsrlic/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"domElement\", \"selector\", \"onChange\", \"onLock\", \"onUnlock\", \"enabled\", \"makeDefault\"],\n  _excluded2 = [\"camera\"];\nimport _extends from '@babel/runtime/helpers/esm/extends';\nimport { useThree } from '@react-three/fiber';\nimport * as React from 'react';\nimport { PointerLockControls as PointerLockControls$1 } from 'three-stdlib';\nvar PointerLockControls = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var domElement = _ref.domElement,\n    selector = _ref.selector,\n    onChange = _ref.onChange,\n    onLock = _ref.onLock,\n    onUnlock = _ref.onUnlock,\n    _ref$enabled = _ref.enabled,\n    enabled = _ref$enabled === void 0 ? true : _ref$enabled,\n    makeDefault = _ref.makeDefault,\n    props = _objectWithoutProperties(_ref, _excluded);\n  var camera = props.camera,\n    rest = _objectWithoutProperties(props, _excluded2);\n  var setEvents = useThree(function (state) {\n    return state.setEvents;\n  });\n  var gl = useThree(function (state) {\n    return state.gl;\n  });\n  var defaultCamera = useThree(function (state) {\n    return state.camera;\n  });\n  var invalidate = useThree(function (state) {\n    return state.invalidate;\n  });\n  var events = useThree(function (state) {\n    return state.events;\n  });\n  var get = useThree(function (state) {\n    return state.get;\n  });\n  var set = useThree(function (state) {\n    return state.set;\n  });\n  var explCamera = camera || defaultCamera;\n  var explDomElement = domElement || events.connected || gl.domElement;\n  var _React$useState = React.useState(function () {\n      return new PointerLockControls$1(explCamera);\n    }),\n    _React$useState2 = _slicedToArray(_React$useState, 1),\n    controls = _React$useState2[0];\n  React.useEffect(function () {\n    if (enabled) {\n      controls.connect(explDomElement); // Force events to be centered while PLC is active\n\n      var oldComputeOffsets = get().events.compute;\n      setEvents({\n        compute: function compute(event, state) {\n          var offsetX = state.size.width / 2;\n          var offsetY = state.size.height / 2;\n          state.pointer.set(offsetX / state.size.width * 2 - 1, -(offsetY / state.size.height) * 2 + 1);\n          state.raycaster.setFromCamera(state.pointer, state.camera);\n        }\n      });\n      return function () {\n        controls.disconnect();\n        setEvents({\n          compute: oldComputeOffsets\n        });\n      };\n    }\n  }, [enabled, controls]);\n  React.useEffect(function () {\n    var callback = function callback(e) {\n      invalidate();\n      if (onChange) onChange(e);\n    };\n    controls.addEventListener('change', callback);\n    if (onLock) controls.addEventListener('lock', onLock);\n    if (onUnlock) controls.addEventListener('unlock', onUnlock); // Enforce previous interaction\n\n    var handler = function handler() {\n      return controls.lock();\n    };\n    var elements = selector ? Array.from(document.querySelectorAll(selector)) : [document];\n    elements.forEach(function (element) {\n      return element && element.addEventListener('click', handler);\n    });\n    return function () {\n      controls.removeEventListener('change', callback);\n      if (onLock) controls.addEventListener('lock', onLock);\n      if (onUnlock) controls.addEventListener('unlock', onUnlock);\n      elements.forEach(function (element) {\n        return element ? element.removeEventListener('click', handler) : undefined;\n      });\n    };\n  }, [onChange, onLock, onUnlock, selector, controls, invalidate]);\n  React.useEffect(function () {\n    if (makeDefault) {\n      var old = get().controls;\n      set({\n        controls: controls\n      });\n      return function () {\n        return set({\n          controls: old\n        });\n      };\n    }\n  }, [makeDefault, controls]);\n  return /*#__PURE__*/React.createElement(\"primitive\", _extends({\n    ref: ref,\n    object: controls\n  }, rest));\n});\nexport { PointerLockControls };","map":null,"metadata":{},"sourceType":"module"}