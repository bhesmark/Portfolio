{"ast":null,"code":"import _slicedToArray from \"/Users/baic/Documents/programm/gsrlic/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/Users/baic/Documents/programm/gsrlic/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"background\", \"scene\", \"blur\"];\nimport _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { useThree, useLoader, useFrame, createPortal, extend } from '@react-three/fiber';\nimport { CubeReflectionMapping, EquirectangularReflectionMapping, sRGBEncoding, LinearEncoding, Scene, WebGLCubeRenderTarget, HalfFloatType, CubeTextureLoader } from 'three';\nimport { RGBELoader, GroundProjectedEnv } from 'three-stdlib';\nimport { presetsObj } from '../helpers/environment-assets.js';\nvar CUBEMAP_ROOT = 'https://market-assets.fra1.cdn.digitaloceanspaces.com/market-assets/hdris/';\nvar isRef = function isRef(obj) {\n  return obj.current && obj.current.isScene;\n};\nvar resolveScene = function resolveScene(scene) {\n  return isRef(scene) ? scene.current : scene;\n};\nfunction setEnvProps(background, scene, defaultScene, texture) {\n  var blur = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n  var target = resolveScene(scene || defaultScene);\n  var oldbg = target.background;\n  var oldenv = target.environment; // @ts-ignore\n\n  var oldBlur = target.backgroundBlurriness || 0;\n  if (background !== 'only') target.environment = texture;\n  if (background) target.background = texture; // @ts-ignore\n\n  if (background && target.backgroundBlurriness !== undefined) target.backgroundBlurriness = blur;\n  return function () {\n    if (background !== 'only') target.environment = oldenv;\n    if (background) target.background = oldbg; // @ts-ignore\n\n    if (background && target.backgroundBlurriness !== undefined) target.backgroundBlurriness = oldBlur;\n  };\n}\nfunction EnvironmentMap(_ref) {\n  var scene = _ref.scene,\n    _ref$background = _ref.background,\n    background = _ref$background === void 0 ? false : _ref$background,\n    blur = _ref.blur,\n    map = _ref.map;\n  var defaultScene = useThree(function (state) {\n    return state.scene;\n  });\n  React.useLayoutEffect(function () {\n    if (map) return setEnvProps(background, scene, defaultScene, map, blur);\n  }, [defaultScene, scene, map, background, blur]);\n  return null;\n}\nfunction useEnvironment(_ref2) {\n  var _ref2$files = _ref2.files,\n    files = _ref2$files === void 0 ? ['/px.png', '/nx.png', '/py.png', '/ny.png', '/pz.png', '/nz.png'] : _ref2$files,\n    _ref2$path = _ref2.path,\n    path = _ref2$path === void 0 ? '' : _ref2$path,\n    _ref2$preset = _ref2.preset,\n    preset = _ref2$preset === void 0 ? undefined : _ref2$preset,\n    _ref2$encoding = _ref2.encoding,\n    encoding = _ref2$encoding === void 0 ? undefined : _ref2$encoding,\n    extensions = _ref2.extensions;\n  if (preset) {\n    if (!(preset in presetsObj)) throw new Error('Preset must be one of: ' + Object.keys(presetsObj).join(', '));\n    files = presetsObj[preset];\n    path = CUBEMAP_ROOT;\n  }\n  var isCubeMap = Array.isArray(files);\n  var loader = isCubeMap ? CubeTextureLoader : RGBELoader;\n  var loaderResult = useLoader(\n  // @ts-expect-error\n  loader, isCubeMap ? [files] : files, function (loader) {\n    loader.setPath(path);\n    if (extensions) extensions(loader);\n  });\n  var texture = isCubeMap ?\n  // @ts-ignore\n  loaderResult[0] : loaderResult;\n  texture.mapping = isCubeMap ? CubeReflectionMapping : EquirectangularReflectionMapping;\n  texture.encoding = (encoding !== null && encoding !== void 0 ? encoding : isCubeMap) ? sRGBEncoding : LinearEncoding;\n  return texture;\n}\nfunction EnvironmentCube(_ref3) {\n  var _ref3$background = _ref3.background,\n    background = _ref3$background === void 0 ? false : _ref3$background,\n    scene = _ref3.scene,\n    blur = _ref3.blur,\n    rest = _objectWithoutProperties(_ref3, _excluded);\n  var texture = useEnvironment(rest);\n  var defaultScene = useThree(function (state) {\n    return state.scene;\n  });\n  React.useLayoutEffect(function () {\n    return setEnvProps(background, scene, defaultScene, texture, blur);\n  }, [texture, background, scene, defaultScene, blur]);\n  return null;\n}\nfunction EnvironmentPortal(_ref4) {\n  var children = _ref4.children,\n    _ref4$near = _ref4.near,\n    near = _ref4$near === void 0 ? 1 : _ref4$near,\n    _ref4$far = _ref4.far,\n    far = _ref4$far === void 0 ? 1000 : _ref4$far,\n    _ref4$resolution = _ref4.resolution,\n    resolution = _ref4$resolution === void 0 ? 256 : _ref4$resolution,\n    _ref4$frames = _ref4.frames,\n    frames = _ref4$frames === void 0 ? 1 : _ref4$frames,\n    map = _ref4.map,\n    _ref4$background = _ref4.background,\n    background = _ref4$background === void 0 ? false : _ref4$background,\n    blur = _ref4.blur,\n    scene = _ref4.scene,\n    files = _ref4.files,\n    path = _ref4.path,\n    _ref4$preset = _ref4.preset,\n    preset = _ref4$preset === void 0 ? undefined : _ref4$preset,\n    extensions = _ref4.extensions;\n  var gl = useThree(function (state) {\n    return state.gl;\n  });\n  var defaultScene = useThree(function (state) {\n    return state.scene;\n  });\n  var camera = React.useRef(null);\n  var _React$useState = React.useState(function () {\n      return new Scene();\n    }),\n    _React$useState2 = _slicedToArray(_React$useState, 1),\n    virtualScene = _React$useState2[0];\n  var fbo = React.useMemo(function () {\n    var fbo = new WebGLCubeRenderTarget(resolution);\n    fbo.texture.type = HalfFloatType;\n    return fbo;\n  }, [resolution]);\n  React.useLayoutEffect(function () {\n    if (frames === 1) camera.current.update(gl, virtualScene);\n    return setEnvProps(background, scene, defaultScene, fbo.texture, blur);\n  }, [children, virtualScene, fbo.texture, scene, defaultScene, background, frames, gl]);\n  var count = 1;\n  useFrame(function () {\n    if (frames === Infinity || count < frames) {\n      camera.current.update(gl, virtualScene);\n      count++;\n    }\n  });\n  return /*#__PURE__*/React.createElement(React.Fragment, null, createPortal( /*#__PURE__*/React.createElement(React.Fragment, null, children, /*#__PURE__*/React.createElement(\"cubeCamera\", {\n    ref: camera,\n    args: [near, far, fbo]\n  }), files || preset ? /*#__PURE__*/React.createElement(EnvironmentCube, {\n    background: true,\n    files: files,\n    preset: preset,\n    path: path,\n    extensions: extensions\n  }) : map ? /*#__PURE__*/React.createElement(EnvironmentMap, {\n    background: true,\n    map: map,\n    extensions: extensions\n  }) : null), virtualScene));\n}\nfunction EnvironmentGround(props) {\n  var _props$ground, _props$ground2, _scale, _props$ground3;\n  var textureDefault = useEnvironment(props);\n  var texture = props.map || textureDefault;\n  React.useMemo(function () {\n    return extend({\n      GroundProjectedEnvImpl: GroundProjectedEnv\n    });\n  }, []);\n  var args = React.useMemo(function () {\n    return [texture];\n  }, [texture]);\n  var height = (_props$ground = props.ground) == null ? void 0 : _props$ground.height;\n  var radius = (_props$ground2 = props.ground) == null ? void 0 : _props$ground2.radius;\n  var scale = (_scale = (_props$ground3 = props.ground) == null ? void 0 : _props$ground3.scale) !== null && _scale !== void 0 ? _scale : 1000;\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(EnvironmentMap, _extends({}, props, {\n    map: texture\n  })), /*#__PURE__*/React.createElement(\"groundProjectedEnvImpl\", {\n    args: args,\n    scale: scale,\n    height: height,\n    radius: radius\n  }));\n}\nfunction Environment(props) {\n  return props.ground ? /*#__PURE__*/React.createElement(EnvironmentGround, props) : props.map ? /*#__PURE__*/React.createElement(EnvironmentMap, props) : props.children ? /*#__PURE__*/React.createElement(EnvironmentPortal, props) : /*#__PURE__*/React.createElement(EnvironmentCube, props);\n}\nexport { Environment, EnvironmentCube, EnvironmentMap, EnvironmentPortal, useEnvironment };","map":null,"metadata":{},"sourceType":"module"}